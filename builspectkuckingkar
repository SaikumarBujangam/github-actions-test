$ terragrunt run-all plan --terragrunt-non-interactive
time=2023-10-10T20:33:37+05:30 level=error msg=failed to get console mode: The handle is invalid.

time=2023-10-10T20:33:37+05:30 level=error msg=failed to get console mode: The handle is invalid.

time=2023-10-10T20:33:37+05:30 level=error msg=failed to get console mode: The handle is invalid.

time=2023-10-10T20:33:37+05:30 level=info msg=The stack at C:/Users/umababy.kannan/OneDrive - HCL Technologies Ltd/Documents/Star CAP/clone/platform-infra/platform-infra/live/dev/eu-central-1/platform-nextflow will be processed in the following order for command plan:
Group 1
- Module C:/Users/umababy.kannan/OneDrive - HCL Technologies Ltd/Documents/Star CAP/clone/platform-infra/platform-infra/live/dev/eu-central-1/platform-nextflow


Acquiring state lock. This may take a few moments...
Releasing state lock. This may take a few moments...
time=2023-10-10T20:33:56+05:30 level=error msg=Module C:/Users/umababy.kannan/OneDrive - HCL Technologies Ltd/Documents/Star CAP/clone/platform-infra/platform-infra/live/dev/eu-central-1/platform-nextflow has finished with an error: 1 error occurred:
        * exit status 1

 prefix=[C:\Users\umababy.kannan\OneDrive - HCL Technologies Ltd\Documents\Star CAP\clone\platform-infra\platform-infra\live\dev\eu-central-1\platform-nextflow]
time=2023-10-10T20:33:56+05:30 level=info msg=╷
│ Error: Error in function call
│
│   on main.tf line 472, in resource "local_file" "init":
│  472:   content = templatefile("${path.module}/init.tpl", {
│  473:     repository_url          = var.repository_url,
│  474:     backend_tag             = var.backend_tag,
│  475:     rds_endpoint            = aws_db_instance.this.endpoint,
│  476:     db_name                 = "${var.env}-${var.platform}-nextflow",
│  477:     frontend_tag            = var.frontend_tag,
│  478:     route_name              = var.routename,
│  479:     tower_contact_email     = var.tower_contact_email,
│  480:     tower_jwt_secret        = var.tower_jwt_secret,
│  481:     tower_crypto_secretkey  = var.tower_crypto_secretkey,
│  482:     tower_license           = var.tower_license,
│  483:     tower_root_users        = var.tower_root_users,
│  484:     tower_db_user           = var.tower_db_user,
│  485:     tower_db_password       = var.tower_db_password,
│  486:     tower_smtp_host         = var.tower_smtp_host,
│  487:     tower_smtp_port         = var.tower_smtp_port,
│  488:     tower_smtp_user         = aws_iam_access_key.smtp_user_key.secret,
│  489:     tower_smtp_password     = aws_iam_access_key.smtp_user_key.ses_smtp_password_v4,
│  490:     tower_enable_wave       = var.tower_enable_wave,
│  491:     tower_ssl_version       = var.tower_ssl_version,
│  492:     tower_auth_flag         = var.tower_auth_flag,
│  493:     tower_starttls_flag     = var.tower_starttls_flag,
│  494:     tower_starttls_req_flag = var.tower_starttls_req_flag
│  495:   })
│     ├────────────────
│     │ aws_db_instance.this.endpoint will be known only after apply
│     │ aws_iam_access_key.smtp_user_key.secret will be known only after apply
│     │ aws_iam_access_key.smtp_user_key.ses_smtp_password_v4 will be known only after apply
│     │ path.module is "."
│     │ var.backend_tag is a string, known only after apply
│     │ var.env is a string, known only after apply
│     │ var.frontend_tag is a string, known only after apply
│     │ var.platform is a string, known only after apply
│     │ var.repository_url has a sensitive value
│     │ var.routename is a string, known only after apply
│     │ var.tower_auth_flag is a bool, known only after apply
│     │ var.tower_contact_email is a string, known only after apply
│     │ var.tower_crypto_secretkey has a sensitive value
│     │ var.tower_db_password has a sensitive value
│     │ var.tower_db_user has a sensitive value
│     │ var.tower_enable_wave is a bool, known only after apply
│     │ var.tower_jwt_secret has a sensitive value
│     │ var.tower_license has a sensitive value
│     │ var.tower_root_users is a string, known only after apply
│     │ var.tower_smtp_host is a string, known only after apply
│     │ var.tower_smtp_port is a number, known only after apply
│     │ var.tower_ssl_version is a string, known only after apply
│     │ var.tower_starttls_flag is a bool, known only after apply
│     │ var.tower_starttls_req_flag is a bool, known only after apply
│
│ Call to function "templatefile" failed: ./init.tpl:169,38-39: Extra
│ characters after interpolation expression; Template interpolation doesn't
│ expect a colon at this location. Did you intend this to be a literal
│ sequence to be processed as part of another language? If so, you can escape
│ it by starting with "$${" instead of just "${"..
╵
time=2023-10-10T20:33:56+05:30 level=error msg=Terraform invocation failed in C:/.terragrunt-cache/sSdP1qzV4X1VYPQCozOYEsytnvc/3i_WC85hFbG0RGQjdTVce7dxmn4/platform-nextflow prefix=[C:\Users\umababy.kannan\OneDrive - HCL Technologies Ltd\Documents\Star CAP\clone\platform-infra\platform-infra\live\dev\eu-central-1\platform-nextflow]

time=2023-10-10T20:33:56+05:30 level=error msg=1 error occurred:
        * exit status 1



umababy.kannan@LP-5CG2311RDH MINGW64 ~/OneDrive - HCL Technologies Ltd/Documents/Star CAP/clone/platform-infra/platform-infra/live/dev/eu-central-1/platform-nextflow (feature/dev-main-platform-update)
$
resource "local_file" "init" {
  content = templatefile("${path.module}/init.tpl", {
    repository_url          = var.repository_url,
    backend_tag             = var.backend_tag,
    rds_endpoint            = aws_db_instance.this.endpoint,
    db_name                 = "${var.env}-${var.platform}-nextflow",
    frontend_tag            = var.frontend_tag,
    route_name              = var.routename,
    tower_contact_email     = var.tower_contact_email,
    tower_jwt_secret        = var.tower_jwt_secret,
    tower_crypto_secretkey  = var.tower_crypto_secretkey,
    tower_license           = var.tower_license,
    tower_root_users        = var.tower_root_users,
    tower_db_user           = var.tower_db_user,
    tower_db_password       = var.tower_db_password,
    tower_smtp_host         = var.tower_smtp_host,
    tower_smtp_port         = var.tower_smtp_port,
    tower_smtp_user         = aws_iam_access_key.smtp_user_key.secret,
    tower_smtp_password     = aws_iam_access_key.smtp_user_key.ses_smtp_password_v4,
    tower_enable_wave       = var.tower_enable_wave,
    tower_ssl_version       = var.tower_ssl_version,
    tower_auth_flag         = var.tower_auth_flag,
    tower_starttls_flag     = var.tower_starttls_flag,
    tower_starttls_req_flag = var.tower_starttls_req_flag
  })
   filename = "${path.module}/init.tpl"
}

Content-Type: multipart/mixed; boundary="//"
MIME-Version: 1.0

--//
Content-Type: text/cloud-config; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="cloud-config.txt"

#cloud-config
cloud_final_modules:
- [scripts-user, always]

--//
Content-Type: text/x-shellscript; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="userdata.txt"

#! /bin/bash

# Install docker
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get update
sudo apt-get install -y docker-ce
sudo usermod -aG docker ubuntu

# Install docker-compose
sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
sudo mv /usr/local/bin/docker-compose /bin/docker-compose
cp -p /bin/docker-compose /usr/bin/docker-compose

# Install NFTower Image
sudo docker login -u 'robot$private+roche-scr-token' -p 'Hst3dQtRWwjyg4v7BAmUZ4kdi5UIXdhH' cr.seqera.io
sudo docker pull cr.seqera.io/private/nf-tower-enterprise/backend:v23.1.3
sudo docker pull cr.seqera.io/private/nf-tower-enterprise/frontend:v23.1.3

# Delete old directories
sudo rm -rf /home/ubuntu/nfpoc
sudo rm -rf /home/ubuntu/nftower

# Create Tower Env file
sudo mkdir -p /home/ubuntu/nftower
sudo chmod -R 755 /home/ubuntu/nftower

sudo touch -p /home/ubuntu/nftower/docker-compose.yml
sudo chmod 755 /home/ubuntu/nftower/docker-compose.yml

# Configuring docker-compose.yml file manually
sudo cat << EOF >> /home/ubuntu/nftower/docker-compose.yml
version: "3"
services:
  redis:
    image: cr.seqera.io/public/redis:5.0.8
    networks:
      - backend
    volumes:
      - \$HOME/.tower/db/redis:/data
    expose:
      - 6379
    command: --appendonly yes
    restart: always
  cron:
    image: ${repository_url}/backend:${backend_tag}
    command: -c '/wait-for-it.sh ${rds_endpoint} -t 60; /migrate-db.sh; /tower.sh'
    networks:
      - frontend
      - backend
    volumes:
      - \$PWD/tower.yml:/tower.yml
    env_file:
      - tower.env
    environment:
      - MICRONAUT_ENVIRONMENTS=prod,redis,cron
    restart: always
    depends_on:
      - redis
  backend:
    image: ${repository_url}/backend:${backend_tag}
    command: -c '/wait-for-it.sh ${rds_endpoint} -t 60; /tower.sh'
    networks:
      - frontend
      - backend
    expose:
      - 8080
    volumes:
      - \$PWD/tower.yml:/tower.yml
    env_file:
      - tower.env
    environment:
      - MICRONAUT_ENVIRONMENTS=prod,redis,ha
    restart: always
    depends_on:
      - redis
      - cron
  frontend:
    image: ${repository_url}/frontend:${frontend_tag}
    networks:
      - frontend
    ports:
      - 8000:80
    restart: always
    depends_on:
      - backend
networks:
  frontend: {}
  backend: {}
EOF

sudo chmod 755 /home/ubuntu/nftower/docker-compose.yml

sudo touch -p /home/ubuntu/nftower/tower.env
sudo chmod 755 /home/ubuntu/nftower/tower.env

# Configuring tower.env file manually
sudo cat << EOF >> /home/ubuntu/nftower/tower.env
 TOWER_SERVER_URL=https://${route_name}
 TOWER_CONTACT_EMAIL=${tower_contact_email}
 TOWER_JWT_SECRET=${tower_jwt_secret}
 TOWER_CRYPTO_SECRETKEY=${tower_crypto_secretkey}
 TOWER_LICENSE=${tower_license}

 # Tower Admins
 TOWER_ROOT_USERS=${tower_root_users}
 # Compute environment settings
 TOWER_ENABLE_PLATFORMS=awsbatch-platform,k8s-platform,slurm-platform

 # DB settings
 TOWER_DB_URL=jdbc:mysql://${rds_endpoint}/${db_name}
 TOWER_DB_DRIVER=org.mariadb.jdbc.Driver
 TOWER_DB_DIALECT=io.seqera.util.MySQL55DialectCollateBin
 TOWER_DB_USER=${tower_db_user}
 TOWER_DB_PASSWORD=${tower_db_password}
 FLYWAY_LOCATIONS=classpath:db-schema/mysql

 # SMTP settings
 TOWER_SMTP_HOST=${tower_smtp_host}
 TOWER_SMTP_PORT=${tower_smtp_port}
 TOWER_SMTP_USER=${tower_smtp_user}
 TOWER_SMTP_PASSWORD=${tower_smtp_password}

 #Tower Update
 TOWER_ENABLE_WAVE=${tower_enable_wave}
 WAVE_SERVER_URL=https://wave.seqera.io
EOF

sudo chmod 755 /home/ubuntu/nftower/tower.env

sudo touch -p /home/ubuntu/nftower/tower.yml
sudo chmod 755 /home/ubuntu/nftower/tower.yml

# Configuring tower.yml file manually
sudo cat << EOF >> /home/ubuntu/nftower/tower.yml
 # e.g.  Configure a local SMTP server
 # DO NOT USE IN PRODUCTION ENVIRONMENT
 #
 # Replace these settings with a SMTP server
 # provided by your cloud vendor

 tower:
   admin:
     root-users: '\$${TOWER_ROOT_USERS:[]}'
   trustedEmails:
     - 'victor.sankarlingam@roche.com'
     - 'juan_luis.canales@roche.com'
     - 'sonat.denizciler@roche.com'
     - 'pascal.gautschi@roche.com'
     - 'global.redcap@roche.com'
     - 'fasih.baig@roche.com'

 mail:
   from: "\$${TOWER_CONTACT_EMAIL}"
   smtp:
     host: \$${TOWER_SMTP_HOST}
     port: \$${TOWER_SMTP_PORT}
     user: \$${TOWER_SMTP_USER}
     password: \$${TOWER_SMTP_PASSWORD}
     # \`auth\` and \`starttls\` should be enabled
     # with a production SMTP host
     auth: ${tower_auth_flag}
     starttls:
       enable: ${tower_starttls_flag}
       required: ${tower_starttls_req_flag}
     ssl:
      protocols: "${tower_ssl_version}"
EOF

sudo chmod 755 /home/ubuntu/nftower/tower.yml

#Script to kill any existing service and bring up new one
sudo touch /home/ubuntu/nftower/nftower_service.sh
sudo chmod 755 /home/ubuntu/nftower/nftower_service.sh

sudo cat << EOF >> /home/ubuntu/nftower/nftower_service.sh

 #!/bin/bash
 cd /home/ubuntu/nftower

 #killing unwanted containers
 /usr/bin/docker kill nfpoc_redis_1 nfpoc_frontend_1 nfpoc_backend_1 nfpoc_cron_1

 #ensuring nf tower containers are bringing down
 /usr/bin/docker-compose down

 #bringing up nf tower resources
 nohup /usr/bin/docker-compose up &
EOF

sudo sh /home/ubuntu/nftower/nftower_service.sh
