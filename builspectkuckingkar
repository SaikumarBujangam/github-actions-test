name: ADL CICD Java Build and Deploy

on:
  workflow_call:
    inputs:
      event_repo_name:
        description: Enter the Event Repo to be Deployed
        type: string
        required: true
      event_repo_branch:
        description: Enter the Event Branch
        type: string
        required: true
      deploy_env:
        description: Deployment Environment
        type: string
        required:  true
      feature_branch_name:
        description: Enter the feature branch name
        type: string
        required: false
      calling_repo_name:
        description: Enter the CICD Repository Full Reference
        type: string
        required: false
        default: 'AlightEngineering/adl-deploy-cicd'
      dispatch_repo_name:
        description: Enter the CICD Repository Name
        type: string
        required: false
        default: 'adl-deploy-cicd'

jobs:
  adl-cicd-deploy:
    env:
      event_repo_name: ${{ inputs.event_repo_name }}
      event_repo_branch: ${{ inputs.event_repo_branch }}
      calling_repo_name: ${{ inputs.calling_repo_name }}
      dispatch_repo_name: ${{ inputs.dispatch_repo_name }}
      deploy_env: ${{ inputs.deploy_env }}
      feature_branch_name: ${{ github.event.inputs.feature_branch_name }}
      gh_user: ${{ secrets.GH_USER_NAME }}
      gh_token: ${{ secrets.GH_CLONE_REPO }}
    runs-on: ubuntu-latest  
    steps:   
    - name: Log Environment Variables
      run: |
        echo "This is the Client Repository: ${event_repo_name}"
        echo "This is the Branch Name: ${event_repo_branch}"
        echo "This is the Deployment Environment: ${deploy_env}"
    - name: Get Repositories
      run: |
        git clone --single-branch --depth=1 --branch='master' https://${gh_user}:${gh_token}@github.com/${calling_repo_name}.git
        if [[ "${deploy_env}" == "qa" ]]
        then
          echo "Cloning branch: ${feature_branch_name} into ${event_repo_name}"
          git clone --single-branch --depth=1 --branch=${feature_branch_name} https://${gh_user}:${gh_token}@github.com/${event_repo_name}.git 
        else
          echo "Cloning branch: ${event_repo_branch} into ${event_repo_name}"
          git clone --single-branch --depth=1 --branch=${event_repo_branch} https://${gh_user}:${gh_token}@github.com/${event_repo_name}.git
        fi

    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
                
    - name: Increment Calling Repo Version
      run: |
        event_repo_base_name=${event_repo_name##*/}
        source ${dispatch_repo_name}/scripts/.mdshrc
        mdsh_init ${deploy_env} local adl ${event_repo_base_name} localhost
        git config --global user.email "dushyant.remivasan@alight.com"
        git config --global user.name "Dushyant Remivasan"
        if [[ "${deploy_env}" = "qc"  && "${event_repo_branch}" = "master"  ]]
        then
          bump_version patch ${event_repo_base_name}
          git -C ${event_repo_base_name} add .version
          git -C ${event_repo_base_name} commit -m "Increments Version"
          git -C ${event_repo_base_name} push
          new_git_tag=$(version ${event_repo_base_name})
          gtag_version ${event_repo_base_name} prod ${new_git_tag} "CICD Pipeline Merge To ${deploy_env}"
        fi
          
    - name: ADL Set Environment Credentials
      id: adl-set-env-creds
      run: |
        source ${dispatch_repo_name}/config/.cicdrc ${deploy_env}
        event_repo_base_name="${event_repo_name##*/}"
        echo "event_repo_base_name=$event_repo_base_name" >> $GITHUB_ENV
        echo "aws_access_key_id_name=ADL_${credential_env}_ACCESS_KEY" >> $GITHUB_OUTPUT
        echo "aws_secret_access_key_name=ADL_${credential_env}_SECRET_KEY" >> $GITHUB_OUTPUT

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      env:
        AWS_ACCESS_KEY_ID_NAME: ${{ steps.adl-set-env-creds.outputs.aws_access_key_id_name }}
        AWS_SECRET_ACCESS_KEY_NAME: ${{ steps.adl-set-env-creds.outputs.aws_secret_access_key_name }}
      with:
        aws-access-key-id: ${{ secrets[env.AWS_ACCESS_KEY_ID_NAME] }}
        aws-secret-access-key: ${{ secrets[env.AWS_SECRET_ACCESS_KEY_NAME] }}
        aws-region: us-east-1

    - name: Install Dependencies
      run: |
        echo "Installing dependencies from ${dispatch_repo_name}/requirements.txt"
        pip install -r ${dispatch_repo_name}/requirements.txt

    - name: Build with Maven
      run: mvn clean package
      working-directory: ${{ github.workspace }}/${{ env.event_repo_base_name }}

    - name: Read bucket properties
      id: read-bucket-properties
      run: |
        properties=$(cat $GITHUB_WORKSPACE/$event_repo_base_name/config/bucket.properties)
        echo "$properties" | while IFS='=' read -r key value ; do
          if [[ $key == "${deploy_env}_bucket" ]]; then
            echo "bucket=$value" >> $GITHUB_ENV
          fi
          if [[ $key == "${deploy_env}_path" ]]; then
            echo "path=$value" >> $GITHUB_ENV
          fi
        done

    - name: Upload JAR to S3
      run: |
        for jarfile in $GITHUB_WORKSPACE/$event_repo_base_name/target/*.jar; do
          aws s3 cp "$jarfile" "s3://$bucket/$path/$(basename "$jarfile")"
        done

