import psycopg2
import time
from alight.foundation.util.logging.standardlogger import StandardLogger

class PostgresPostgresDataAPI:
    logger = StandardLogger().getDefaultLogger()

    def __init__(self, db_name=None, db_user_name=None, db_host=None, db_port=5432, db_password=None):
        self._conn = None
        self._cursor = None
        self._db_name = db_name
        self._db_user_name = db_user_name
        self._db_host = db_host
        self._db_port = db_port
        self._db_password = db_password

    def connect(self):
        try:
            connection_params = {
                "dbname": self._db_name,
                "user": self._db_user_name,
                "password": self._db_password,
                "host": self._db_host,
                "port": self._db_port
            }

            self._conn = psycopg2.connect(**connection_params)
            self._cursor = self._conn.cursor()

        except Exception as e:
            self.logger.error(f"Error connecting to the database: {e}")
            raise

    def execute_sql(self, sql_statement, retry_attempts=500, retry_interval=1, with_event=True, parameters=None):
        try:
            res = {}
            if parameters is None:
                res = self._cursor.execute_statement(Database=self._db_name, DbUser=self._db_user_name, Sql=sql_statement,
                                           WithEvent=with_event)
            else:
                res = self._cursor.execute_statement(Database=self._db_name, DbUser=self._db_user_name, Sql=sql_statement,
                                                     Parameters=parameters, WithEvent=with_event)

            PostgresDataAPI.logger.debug(res)
            query_id = res["Id"]
            current_attempt=0
            status = "N/A"
            while current_attempt < retry_attempts:
                status = self.status_check(query_id)
                if status in ("FAILED", "FINISHED"):
                    PostgresDataAPI.logger.info("status is: {}".format(status))
                    break
                time.sleep(retry_interval)
            return query_id, status
        except Exception as e:
            raise e

    def status_check(self, query_id):
        desc = self._cursor.describe_statement(Id=query_id)
        status = desc["Status"]
        if status == "FAILED":
            PostgresDataAPI.logger.error("SQL query failed: {}: {}".format(query_id, desc['Error']))
        return status.strip('"')

    def close_connection(self):
        if self._cursor:
            self._cursor.close()
        if self._conn:
            self._conn.close()
