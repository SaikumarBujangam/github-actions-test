Documenting the provided GitHub Actions workflow involves explaining the purpose, triggers, inputs, and jobs that make up the workflow. The workflow is designed for managing repository modifications, including setting up CODEOWNERS, branch protections, and deploying workflows from a CICD template repository.

### Workflow Name: ADL CICD Repository Modification

#### Purpose
This workflow facilitates the creation, configuration, and maintenance of repositories within the AlightEngineering organization, specifically for ADL (Alight Data Lake) projects. It automates tasks such as deleting release branches, adding secrets, updating CODEOWNERS, creating environments, and adding workflows from a template repository.

#### Triggers
- **Workflow Dispatch**: This workflow is manually triggered. The `workflow_dispatch` event allows it to be run from GitHub's UI with custom inputs.

#### Inputs
The workflow requires several inputs, which are provided when the workflow is manually triggered:
- `repo-division-name`: Identifies the division area of the repository.
- `repo-group-name`: Specifies the data product associated with the repository.
- `repo-subject-area`: Denotes the subject area of the repository.
- `org-name`: The GitHub organization under which the repository is created.
- `admin-team-name`: Specifies the admin team for the repository.
- `repo-approvers-team`: Defines the team responsible for approving changes to the repository.
- `workflow-template-repo`: Points to the repository containing GitHub Actions Workflow templates.

#### Jobs
The workflow consists of multiple jobs, each performing specific tasks:

1. **adl-update-repo**: Handles the initial setup and configuration tasks such as checking inputs, deleting release branches, adding secrets, updating the CODEOWNERS file, creating environments, and adding workflows from the CICD template repository.

   - **Check Inputs**: Validates the provided inputs.
   - **Delete Release Branches**: Removes release branches and their protections.
   - **Add Secrets to the Client Repository**: Adds required secrets to the repository.
   - **Update CODEOWNERS on master**: Updates the CODEOWNERS file on the master branch based on a template.
   - **Get Team IDs**: Fetches the GitHub team IDs required for environment creation.
   - **Create Environments**: Creates the specified environments with appropriate settings and team reviewers.
   - **Adds Workflows from CICD Template Repository**: Copies workflows from the specified template repository to the target repository.

2. **update-master-branch-permissions**: Uses another workflow defined in the `AlightEngineering/adl-awsdeploy-cicd` repository to update branch protection rules for the master branch. It sets up branch permissions, including approver and bypass teams, according to the provided inputs.

#### Permissions
- The workflow utilizes secrets such as `GH_CLONE_REPO`, `REPO_PAT`, `GH_USER_NAME`, and various `ADL_*` keys to authenticate and perform operations. These secrets must be pre-configured in the GitHub repository or organization.
- It requires permissions to delete branches, add secrets, update repository files, and create environments within the specified GitHub organization and repository.

#### CODEOWNERS
The CODEOWNERS file is crucial for defining who has the authority to review and approve changes to different parts of the repository. This workflow dynamically generates and updates the CODEOWNERS file based on the specified approvers team and admin team, ensuring that only authorized changes are made to sensitive parts of the project.

### Conclusion
This documentation outlines the structure, purpose, and components of the ADL CICD Repository Modification workflow. It serves as a guide for contributors and maintainers to understand how repository setups and modifications are automated within the AlightEngineering organization, enhancing the efficiency and security of project management practices.
