resource "kubernetes_cluster_role" "dd_sidecar_cluster_role" {
  metadata {
    name = "datadog-agent"
  }
  rule {
    api_groups = [""]
    resources  = ["nodes", "namespaces", "endpoints"]
    verbs      = ["get", "list"]
  }

  rule {
    api_groups = [""]
    resources  = ["nodes/metrics","nodes/spec", "nodes/stats", "nodes/proxy", "nodes/pods", "nodes/healthz"]
    verbs      = ["get"]
  }
}

# As pods can use not more than one serviceaccount, that serviceaccount must be bind to the clusterrole in order for DD sidecar to work
resource "kubernetes_cluster_role_binding" "dd_sidecar_rolebinding" {
  metadata {
    name = "datadog-agent-clusterrolebinding"
  }
  role_ref {
    api_group = "rbac.authorization.k8s.io"
    kind      = "ClusterRole"
    name      = "datadog-agent"
  }

  dynamic "subject" {
    for_each = var.microservice_ns_and_serviceaccounts
    content {
      kind      = "ServiceAccount"
      namespace = subject.key
      name      = subject.value
    }
  }
}
