import boto3
import json
import datetime
import logging
import uuid
from boto3.dynamodb.types import TypeDeserializer

# Initialize logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)

STATUS_SUCCESS = "SUCCESS"
STATUS_FAILED = "FAILED"


def ddb_deserialize(r, type_deserializer=TypeDeserializer()):
    return type_deserializer.deserialize({"M": r})


def lambda_handler(event, context):
    try:
        logger.info('EVENT :' + json.dumps(event))
        # Initialize DynamoDB clients for source and destination tables
        destination_table_name = "DataIngressLog"
        dynamodb = boto3.resource('dynamodb')

        destination_table_name = dynamodb.Table(destination_table_name)

        logger.info('## Outside for loop... = %s', event['Records'])

        for record in event['Records']:
            logger.info('## Inside for loop...')
            if record['eventName'] == 'INSERT' or record['eventName'] == 'MODIFY' or record['eventName'] == 'REMOVE':
                # Get the changed item from the source table
                logger.info('## Inside actionif...')
                item = record['dynamodb']['NewImage'] if record['eventName'] != 'REMOVE' else record['dynamodb'][
                    'OldImage']

                if item:
                    new_images = ddb_deserialize(item)
                    logger.info('## New Images = %s', new_images)
                    logger.info('## Item present...')
                    # Write the item to the destination (log) table

                    metadata = json.loads(
                        new_images['approval_metadata']) if 'approval_metadata' in new_images else None
                    action_performed_by = new_images['approved_by'] if 'approved_by' in new_images else None
                    if not metadata:
                        metadata = json.loads(new_images['associate_metadata'])
                        action_performed_by = new_images['created_by']
                        logger.info('## before additional_values...')
                    additional_values = {
                        "dataset_status": new_images['dataset_status'] if 'dataset_status' in new_images else "",
                        "no_of_files_approved": str(new_images[
                            'no_of_files_approved']) if 'no_of_files_approved' in new_images else "",
                        "remarks": new_images['reject_reason'] if 'reject_reason' in new_images else "",
                    }

                logger.info('## before update...')
                metadata.update(additional_values)
                logger.info('## metadata...%s', metadata)

                now = datetime.datetime.now()
                logger.info('## Date... = %s', now)
                date_now = now.strftime("%Y-%m-%dT%H:%M:%S.%f")

                logger.info('## Before Data...')
                data = {
                    "log_id": str(uuid.uuid4()),
                    "action": record['eventName'],
                    "date_time_changed": date_now,
                    "action_performed_by": action_performed_by,
                    "metadata": str(metadata).replace("'", "\""),
                }

                destination_table_name.put_item(Item=data)
        return {'status': STATUS_SUCCESS, 'body': 'Data logged successfully'}
    except Exception as err:
        logger.error('Data Ingress Log Failure %s', event['Records'])
        logger.error("Error :" + str(err))
        return {'status': STATUS_FAILED, 'error': str(err)}
