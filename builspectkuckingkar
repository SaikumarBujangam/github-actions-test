import unittest
from alight.foundation.postgres.postgresdataapi import PostgresDataAPI
from alight.foundation.util.argparsebuilder import GenerateParser
from alight.foundation.util.logging.standardlogger import StandardLogger

class TestPostgresDataAPI(unittest.TestCase):
    logger = StandardLogger().getDefaultLogger()

    def setUp(self):
        self.data_api = PostgresDataAPI(db_name="postgres", db_user_name="dbusername", db_host="adl-com-d1-cdp-dcnexus.cgs723tlzdrk.us-east-1.rds.amazonaws.com", db_password="Password123$")

    def tearDown(self):
        self.data_api.close_connection()

    def test_create_table(self):
        sql_statement = "CREATE TABLE test_cicd.sample_table (id SERIAL PRIMARY KEY, name VARCHAR);"
        query_id, status = self.data_api.execute_sql(sql_statement)
        self.assertEqual(status, "FINISHED")

    def test_select_from_table(self):
        self.test_create_table()  # Ensure there's a table to select from

        sql_statement = "SELECT * FROM test_cicd.sample_table;"
        query_id, status = self.data_api.execute_sql(sql_statement)
        self.assertEqual(status, "FINISHED")

    def test_table_not_created(self):
        sql_statement = "SELECT * FROM test_cicd.non_existent_table;"
        query_id, status = self.data_api.execute_sql(sql_statement)
        self.assertEqual(status, "FAILED")

if __name__ == '__main__':
    unittest.main()
