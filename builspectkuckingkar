resource "aws_s3_bucket" "terraform_state" {
  for_each  = toset(var.environment_list)
  bucket    = "${var.platform}-${each.key}-tf-state"

   lifecycle {
    prevent_destroy = true
    ignore_changes  = [acl, force_destroy, server_side_encryption_configuration]
  }
}

resource "aws_s3_bucket_versioning" "terraform_state" {
  for_each         = aws_s3_bucket.terraform_state
  bucket           = each.value.id
  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "terraform_state" {
  for_each                = aws_s3_bucket.terraform_state
  bucket                  = each.value.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm     = "AES256"
    }
  }
}

resource "aws_s3_bucket_public_access_block" "bucket" {
  for_each                = aws_s3_bucket.terraform_state
  bucket                  = each.value.id
  block_public_acls       = true
  block_public_policy     = true
  restrict_public_buckets = true
  ignore_public_acls      = true
}

resource "aws_dynamodb_table" "terraform_locks" {
  
  for_each  = toset(var.environment_list)
  name         = "${var.platform}-${each.key}-tf-state-lock"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "LockID"
  attribute {
    name = "LockID"
    type = "S"
  }

  lifecycle {
    prevent_destroy = true
  }
}

resource "aws_s3_bucket_policy" "terraform_state_https_policy" {

  for_each = aws_s3_bucket.terraform_state
  bucket = each.value.id
  policy = templatefile("${path.module}/../../aws-common/templates/s3_bucket_https_policy.tpl", {
    bucket_arn = each.value.arn
  })
}
