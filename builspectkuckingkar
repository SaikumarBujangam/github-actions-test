import os
import sys
import json
from alight.foundation.aws.jarbuildutil import JarBuildUtil
from alight.foundation.util.argparsebuilder import GenerateParser
from alight.foundation.util.logging.standardlogger import StandardLogger

if __name__ == "__main__":
    logger = StandardLogger().getDefaultLogger()
    try:
        command_args = GenerateParser().build()
        commandFile = os.path.join(command_args.baseRepoDir, command_args.jarDefinitionFile)
        with open(commandFile) as file:
            config = json.load(file)

        baseRepoDir = command_args.baseRepoDir
        bucketName = command_args.deploymentBucket
        jar_util = JarBuildUtil(deployment_bucket=bucketName)

        for file_info in config['files']:
            nested_path_root = file_info['nested_path_root']
            file_details = file_info['file_details']
            source_directory = os.path.join(baseRepoDir, nested_path_root, file_details['source'])
            destination_path = file_details['destination']

            if not os.path.exists(source_directory):
                logger.error("The source directory does not exist: {}".format(source_directory))
                continue

            files_to_upload = [os.path.join(root, f) for root, dirs, files in os.walk(source_directory) for f in files]

            success = jar_util.upload_files_to_s3(files_to_upload, destination_path)
            if not success:
                logger.error("Failed to upload files from {} to {}".format(source_directory, destination_path))

    except Exception as e:
        logger.error("An error occurred: {}".format(e))
