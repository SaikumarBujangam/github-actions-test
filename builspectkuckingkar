import unittest
from alight.foundation.redshift.redshiftschematojson import RedshiftSchemaToJSON
from alight.foundation.redshift.datapi import DataAPI

class TestRedshiftSchemaToJSONIntegration(unittest.TestCase):

    def setUp(self):
        self.data_api = DataAPI(
            db_cluster_id="cluster-id",
            db_name="your-db-name",
            db_user_name="username"
        )
    def test_get_object_schema(self):
        redshift_schema_extractor = RedshiftSchemaToJSON(self.data_api)

        object_schema_json = redshift_schema_extractor.get_object_schema(
            database_name="test_db",
            schema_name="public",
            object_name="test_table"
        )
        expected_schema = {
            "Database": "test_db",
            "Schema": "public",
            "ObjectName": "test_table",
            "Fields": [
                {
                    "FieldName": "column1",
                    "FieldType": "varchar",
                    "FieldPrecision": None,
                    "EncodingCompression": None
                },
                # Add more expected fields here
            ]
        }

        self.assertEqual(json.loads(object_schema_json), expected_schema)

    def test_get_object_schema_error(self):
        redshift_schema_extractor = RedshiftSchemaToJSON(self.data_api)

        with self.assertRaises(Exception):
            redshift_schema_extractor.get_object_schema(
                database_name="test_db",
                schema_name="public",
                object_name="non_existent_table"
            )

if __name__ == '__main__':
    unittest.main()
