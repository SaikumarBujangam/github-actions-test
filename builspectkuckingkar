
Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

C:\Users\umababy.kannan\OneDrive - HCL Technologies Ltd\Documents\Star CAP\project-infra-provisioning-services\terraform-init>terraform plan
╷
│ Error: Incorrect attribute value type
│
│   on ..\terraform-script\compute-module\project-vpc\main.tf line 184, in resource "aws_route" "private_nat_gateway":
│  184:   route_table_id         = aws_route_table.project_private[count.index]
│     ├────────────────
│     │ aws_route_table.project_private is tuple with 1 element
│     │ count.index is 0
│
│ Inappropriate value for attribute "route_table_id": string required.
╵
╷
│ Error: Incorrect attribute value type
│
│   on ..\terraform-script\compute-module\project-vpc\main.tf line 186, in resource "aws_route" "private_nat_gateway":
│  186:   nat_gateway_id         = aws_nat_gateway.project_nat_gateway[count.index]
│     ├────────────────
│     │ aws_nat_gateway.project_nat_gateway is tuple with 1 element
│     │ count.index is 0
│
│ Inappropriate value for attribute "nat_gateway_id": string required.
╵

locals {
  nat_gateway_count = 1
  vpc_name = "${var.env}-${var.platform}-project-vpc"
}

##########################
# project VPC of Starcap 
##########################
resource "aws_vpc" "project_vpc" {

  cidr_block           = var.vpc_cidr
  instance_tenancy     = "default"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = merge(
    {
      "Name" = local.vpc_name
    },
  )
}

###################
# Public Subnets
###################
resource "aws_subnet" "project_public_subnet" {
  count             = length(var.public_subnets_cidr) > 0 ? length(var.public_subnets_cidr) : 0
  vpc_id            = aws_vpc.project_vpc.id
  cidr_block        = var.public_subnets_cidr[count.index]
  availability_zone = var.azs[count.index]

  tags = merge(
    {
      "Name" = "${var.env}-${var.platform}-project-az-${element(split("-",var.azs[count.index]),2)}"
    },
  )
}

###################
# Internet Gateway
###################
resource "aws_internet_gateway" "project_igw" {
  #count = var.create_vpc && var.create_igw && length(var.public_subnets) > 0 ? 1 : 0

  vpc_id = aws_vpc.project_vpc.id

  tags = merge(
    {
      "Name" = "${var.env}-${var.platform}-project-igw"
    },
  )
}


################
# Publiс routes                              
################
resource "aws_route_table" "project_public_rt" {
  count = var.create_vpc && length(var.public_subnets) > 0 ? 1 : 0

  vpc_id = aws_vpc.project_vpc.id

  tags = merge(
    {
      "Name" = "${var.env}-${var.platform}-project-pub-rt"
    },
  )
}

resource "aws_route" "project_public_internet_gateway" {
  count = var.create_vpc && var.create_igw && length(var.public_subnets) > 0 ? 1 : 0

  route_table_id         = aws_route_table.project_public_rt[count.index]
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.project_igw[count.index]

  timeouts {
    create = "5m"
  }
}

##########################
# Route table association
##########################

resource "aws_route_table_association" "public_rt_association" {
  count = var.create_vpc && length(var.public_subnets) > 0 ? length(var.public_subnets) : 0

  subnet_id      = element(aws_subnet.project_public_subnet.*.id, count.index)
  route_table_id = aws_route_table.project_public_rt[count.index]
}

####################
# EIP of NAT Gateway
####################

resource "aws_eip" "project_nat" {
  count = local.nat_gateway_count

  vpc = true

  tags = merge(
    {
      "Name" = "${var.env}-${var.platform}-project-nat-eip-${count.index}"
    },
  )
}


##############
# NAT Gateway
##############

resource "aws_nat_gateway" "project_nat_gateway" {
  count = local.nat_gateway_count

  allocation_id = element(
    aws_eip.project_nat.*.id,
    count.index,
  )
  subnet_id = element(
    aws_subnet.project_public_subnet.*.id,
    count.index,
  )

  tags = merge(
    {
      "Name" = "${var.env}-${var.platform}-project-nat-az-${element(split("-",var.azs[count.index]),2)}"
    },
  )

  depends_on = [aws_internet_gateway.project_igw]
}

#############
# HCP Subnet
#############
resource "aws_subnet" "hcp_subnet" {
  count             = var.create_vpc && length(var.hcp_subnet) > 0 ? length(var.hcp_subnet) : 0
  vpc_id            = aws_vpc.project_vpc.id
  cidr_block        = var.hcp_subnet[count.index]
  availability_zone = var.azs[count.index]

  tags = merge(
    {
      "Name" = "${var.env}-${var.platform}-project-${element(split("-",var.azs[count.index]),2)}"
    },
  )
}


##########################
# Data Analytical Subnet 
##########################
resource "aws_subnet" "data_analytical_subnet" {
  count             = var.create_vpc && length(var.data_analytical_subnet) > 0 ? length(var.data_analytical_subnet) : 0
  vpc_id            = aws_vpc.project_vpc.id
  cidr_block        = var.data_analytical_subnet[count.index]
  availability_zone = var.azs[count.index]

  tags = merge(
    {
      "Name" = "${var.env}-${var.platform}-project-${element(split("-",var.azs[count.index]),2)}"
    },
  )
}

#################
# Private routes
#################
resource "aws_route_table" "project_private" {
  count = local.nat_gateway_count
  vpc_id = aws_vpc.project_vpc.id
  tags = merge(
    {
      "Name" = "${var.env}-${var.platform}-project-pvt-rt-${count.index}"
    },
  )
}

resource "aws_route" "private_nat_gateway" {
  count = var.create_vpc && var.enable_nat_gateway ? local.nat_gateway_count : 0

  route_table_id         = aws_route_table.project_private[count.index]
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.project_nat_gateway[count.index]

  timeouts {
    create = "5m"
  }
}

resource "aws_route_table_association" "project" {
  count = length(var.hcp_subnet)

  subnet_id = element(aws_subnet.hcp_subnet.*.id, count.index)
  route_table_id = element(aws_route_table.project_private.*.id, count.index)
} 
