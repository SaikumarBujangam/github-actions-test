data "aws_lb" "alb" {
  name = kubectl_manifest.ingress.name

  depends_on = [ module.eks_load_balancer_controller ]
}

data "aws_lb_listener" "HTTP80" {
  load_balancer_arn = data.aws_lb.alb.arn
  port              = 80
}

module "api_gateway" {
  source = "terraform-aws-modules/apigateway-v2/aws"
  version = "2.2.2"

  name          = "${var.env}-${var.platform}-platform-apigateway"
  description   = "API Gateway for starcap platform"
  protocol_type = "HTTP"

  domain_name                 = "api.${var.domain_name}"
  domain_name_certificate_arn = aws_acm_certificate_validation.validation.certificate_arn

  cors_configuration = {
    allow_headers = ["content-type", "x-amz-date", "authorization", "x-api-key", "x-amz-security-token", "x-amz-user-agent", "x-navify-tenant", "access_token"]
    allow_methods = ["PUT", "POST", "GET", "OPTIONS", "DELETE"]
    allow_origins = ["https://${var.domain_name}", "http://${var.env}-${var.platform}-swagger-ui.s3-website.eu-central-1.amazonaws.com"]
    allow_credentials = true
    expose_headers  = ["*"]
    max_age = 60
  }

  default_route_settings = {
    detailed_metrics_enabled = true
    throttling_burst_limit   = 200
    throttling_rate_limit    = 100
  }

  integrations = {
    "GET /{proxy+}" = {
      connection_type    = "VPC_LINK"
      vpc_link           = "cluster-vpc"
      integration_uri    = data.aws_lb_listener.HTTP80.arn
      integration_type   = "HTTP_PROXY"
      integration_method = "ANY"
    }

    "PUT /{proxy+}" = {
      connection_type    = "VPC_LINK"
      vpc_link           = "cluster-vpc"
      integration_uri    = data.aws_lb_listener.HTTP80.arn
      integration_type   = "HTTP_PROXY"
      integration_method = "ANY"
    }
    
    "POST /{proxy+}" = {
      connection_type    = "VPC_LINK"
      vpc_link           = "cluster-vpc"
      integration_uri    = data.aws_lb_listener.HTTP80.arn
      integration_type   = "HTTP_PROXY"
      integration_method = "ANY"
    }

    "DELETE /{proxy+}" = {
      connection_type    = "VPC_LINK"
      vpc_link           = "cluster-vpc"
      integration_uri    = data.aws_lb_listener.HTTP80.arn
      integration_type   = "HTTP_PROXY"
      integration_method = "ANY"
    }
  }

  vpc_links = {
    cluster-vpc = {
      name               = "ptfm-alb"
      security_group_ids = [module.api_gateway_security_group.security_group_id]
      subnet_ids         = var.application_subnet_ids
    }
  }

  tags = {
    Name = "${var.env}-${var.platform}-platform-apigateway"
  }
}

module "api_gateway_security_group" {
  source  = "terraform-aws-modules/security-group/aws"
  version = "~> 4.0"

  name        = "${var.env}-${var.platform}-api-gateway-sg"
  description = "Security group of API Gateway"
  vpc_id      = var.vpc_id

  ingress_cidr_blocks = ["0.0.0.0/0"]
  ingress_rules       = ["http-80-tcp"]

  egress_rules = ["all-all"]
}


resource "kubectl_manifest" "backend_namespace" {
    yaml_body = file("${path.module}/config/backend-namespace.yaml")
}

resource "kubectl_manifest" "aws_observability_namespace" {
    yaml_body = file("${path.module}/config/aws-observability-namespace.yaml")
}

resource "kubectl_manifest" "ingress" {
    yaml_body = file("${path.module}/config/ingress.yaml")
    depends_on = [ kubectl_manifest.backend_namespace ]
}

resource "kubectl_manifest" "service_account" {
    yaml_body = templatefile("${path.module}/config/service-account.yaml", {eks_sa_role = aws_iam_role.eks_sa_role.arn })
    depends_on = [ kubectl_manifest.backend_namespace ]
}

resource "kubectl_manifest" "logging" {
    yaml_body = file("${path.module}/config/logging.yaml")
    depends_on = [ kubectl_manifest.aws_observability_namespace ]
}


 Error: reading ELBv2 Load Balancers: couldn't find resource
│ 
│   with data.aws_lb.alb,
│   on api_gateway.tf line 1, in data "aws_lb" "alb":
│    1: data "aws_lb" "alb" {
│ 
╵
time=2023-08-03T15:17:17Z level=error msg=Terraform invocation failed in /codebuild/output/src3679116684/src/live/stg/eu-central-1/platform-backend/.terragrunt-cache/qyQJWfz_eu3pJhDMI7okMDAmR-8/Wxw-VoUEb61aLBQmNqVR44TL-Go/platform-backend prefix=[/codebuild/output/src3679116684/src/live/stg/eu-central-1/platform-backend] 

time=2023-08-03T15:17:17Z level=error msg=1 error occurred:
    * exit status 1
