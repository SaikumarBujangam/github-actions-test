$ terragrunt run-all plan --terragrunt-non-interactive
time=2024-02-06T11:38:30+05:30 level=error msg=failed to get console mode: The handle is invalid.

time=2024-02-06T11:38:30+05:30 level=error msg=failed to get console mode: The handle is invalid.

time=2024-02-06T11:38:30+05:30 level=error msg=failed to get console mode: The handle is invalid.

time=2024-02-06T11:38:30+05:30 level=info msg=The stack at C:/Users/umababy.kannan/OneDrive - HCL Technologies Ltd/Documents/Star CAP/platform-infra/live/dev/eu-central-1/platform-datastore will be processed in the following order for command plan:
Group 1
- Module C:/Users/umababy.kannan/OneDrive - HCL Technologies Ltd/Documents/Star CAP/platform-infra/live/dev/eu-central-1/platform-datastore


Acquiring state lock. This may take a few moments...
module.platform_dynamodb_table["DataIngressLog"].aws_dynamodb_table.table: Refreshing state... [id=DataIngressLog]
module.platform_dynamodb_table["Instance"].aws_dynamodb_table.table: Refreshing state... [id=Instance]
module.platform_dynamodb_table["FileUpload"].aws_dynamodb_table.table: Refreshing state... [id=FileUpload]
module.platform_dynamodb_table["DataIngress"].aws_dynamodb_table.table: Refreshing state... [id=DataIngress]
module.platform_dynamodb_table["UserLoginDetails"].aws_dynamodb_table.table: Refreshing state... [id=UserLoginDetails]
module.platform_dynamodb_table["Organisation"].aws_dynamodb_table.table: Refreshing state... [id=Organisation]
module.platform_dynamodb_table["OrganisationNetworkDetails"].aws_dynamodb_table.table: Refreshing state... [id=OrganisationNetworkDetails]
module.platform_dynamodb_table["ProjectNetworkDetails"].aws_dynamodb_table.table: Refreshing state... [id=ProjectNetworkDetails]
module.platform_dynamodb_table["User"].aws_dynamodb_table.table: Refreshing state... [id=User]
module.platform_dynamodb_table["Audit"].aws_dynamodb_table.table: Refreshing state... [id=Audit]
module.platform_dynamodb_table["RoleDetails"].aws_dynamodb_table.table: Refreshing state... [id=RoleDetails]
module.platform_dynamodb_table["UserTrainingDetails"].aws_dynamodb_table.table: Refreshing state... [id=UserTrainingDetails]
module.platform_dynamodb_table["UserRoleDetails"].aws_dynamodb_table.table: Refreshing state... [id=UserRoleDetails]
module.platform_dynamodb_table["PlatformConfig"].aws_dynamodb_table.table: Refreshing state... [id=PlatformConfig]
module.platform_dynamodb_table["Project"].aws_dynamodb_table.table: Refreshing state... [id=Project]
module.platform_dynamodb_table["Sites"].aws_dynamodb_table.table: Refreshing state... [id=Sites]
module.platform_dynamodb_table["ProjectInfraDetails"].aws_dynamodb_table.table: Refreshing state... [id=ProjectInfraDetails]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.platform_dynamodb_table["DataAsset"].aws_dynamodb_table.table will be created
  + resource "aws_dynamodb_table" "table" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "data_asset_id"
      + id               = (known after apply)
      + name             = "DataAsset"
      + read_capacity    = (known after apply)
      + stream_arn       = (known after apply)
      + stream_enabled   = false
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags_all         = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + write_capacity   = (known after apply)

      + attribute {
          + name = "data_asset_id"
          + type = "S"
        }

      + point_in_time_recovery {
          + enabled = (known after apply)
        }

      + server_side_encryption {
          + enabled     = (known after apply)
          + kms_key_arn = (known after apply)
        }

      + ttl {
          + attribute_name = (known after apply)
          + enabled        = (known after apply)
        }
    }

  # module.platform_dynamodb_table["DataAssetFile"].aws_dynamodb_table.table will be created
  + resource "aws_dynamodb_table" "table" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "data_asset_file_id"
      + id               = (known after apply)
      + name             = "DataAssetFile"
      + read_capacity    = (known after apply)
      + stream_arn       = (known after apply)
      + stream_enabled   = false
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags_all         = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + write_capacity   = (known after apply)

      + attribute {
          + name = "data_asset_file_id"
          + type = "S"
        }

      + point_in_time_recovery {
          + enabled = (known after apply)
        }

      + server_side_encryption {
          + enabled     = (known after apply)
          + kms_key_arn = (known after apply)
        }

      + ttl {
          + attribute_name = (known after apply)
          + enabled        = (known after apply)
        }
    }

  # module.platform_dynamodb_table["DataAssetMetadata"].aws_dynamodb_table.table will be created
  + resource "aws_dynamodb_table" "table" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "data_asset_metadata_id"
      + id               = (known after apply)
      + name             = "DataAssetMetadata"
      + read_capacity    = (known after apply)
      + stream_arn       = (known after apply)
      + stream_enabled   = false
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags_all         = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + write_capacity   = (known after apply)

      + attribute {
          + name = "data_asset_metadata_id"
          + type = "S"
        }

      + point_in_time_recovery {
          + enabled = (known after apply)
        }

      + server_side_encryption {
          + enabled     = (known after apply)
          + kms_key_arn = (known after apply)
        }

      + ttl {
          + attribute_name = (known after apply)
          + enabled        = (known after apply)
        }
    }

  # module.platform_dynamodb_table["Dataset"].aws_dynamodb_table.table will be created
  + resource "aws_dynamodb_table" "table" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "dataset_id"
      + id               = (known after apply)
      + name             = "Dataset"
      + read_capacity    = (known after apply)
      + stream_arn       = (known after apply)
      + stream_enabled   = false
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags_all         = {
          + "Environment" = "dev"
          + "Terraform"   = "true"
        }
      + write_capacity   = (known after apply)

      + attribute {
          + name = "dataset_id"
          + type = "S"
        }

      + point_in_time_recovery {
          + enabled = (known after apply)
        }

      + server_side_encryption {
          + enabled     = (known after apply)
          + kms_key_arn = (known after apply)
        }

      + ttl {
          + attribute_name = (known after apply)
          + enabled        = (known after apply)
        }
    }

Plan: 4 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
Releasing state lock. This may take a few moments...

umababy.kannan@LP-5CG2311RDH MINGW64 ~/OneDrive - HCL Technologies Ltd/Documents/Star CAP/platform-infra/live/dev/eu-central-1/platform-datastore (org-catalog)
$
