resource "aws_iam_role" "api_gateway_role" {
  name = "${var.platform}-api-gateway-sqs-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = "APIGatewayAssume"
        Principal = {
          Service = "apigateway.amazonaws.com"
        }
      },
    ]
  })
}

#########################################
# IAM Policy - API Gateway SQS Triggering
#########################################

resource "aws_iam_role_policy" "api_gateway_role_policy" {
  name = "${var.platform}-api-gateway-loggroup-policy"
  role = aws_iam_role.api_gateway_role.id
  policy = jsonencode(
    {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "SQSAccess",
          "Effect" : "Allow",
          "Action" : "sqs:*",
          "Resource" : "*"
        },
        {
          "Sid" : "LogsAccess",
          "Effect" : "Allow",
          "Action" : "logs:*",
          "Resource" : "*"
        }
      ]
    }
  )
}

#######################
# IAM Role - For Lambda
#######################

resource "aws_iam_role" "lambda_role" {
  name               = "${var.platform}-${var.lambda_function_name}-role"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow"
    }
  ]
}
EOF
}

###########################################
# IAM Policy: Cloudwatch Logs access policy
###########################################

data "template_file" "cloudwatch_logs_policy_template" {
  template = file("${path.module}/templates/cloudwatch_logs_iam_policy.tpl")
}

resource "aws_iam_role_policy" "attach_cloudwatch_logs_policy" {
  name   = "${var.platform}-${var.lambda_function_name}-cloudwatch-logs-policy"
  role   = aws_iam_role.lambda_role.name
  policy = data.template_file.cloudwatch_logs_policy_template.rendered
}

###########################################
# IAM Policy: Secrets manager access policy
###########################################]

data "template_file" "secrets_manager_policy_template" {
  template = file("${path.module}/templates/secrets_manager_iam_policy.tpl")
}

resource "aws_iam_role_policy" "attach_secrets_manager_policy" {
  name   = "${var.platform}-${var.lambda_function_name}-secrets-manager-policy"
  role   = aws_iam_role.lambda_role.name
  policy = data.template_file.secrets_manager_policy_template.rendered
}

###########################################
# IAM Policy: Codecommit access policy
###########################################]

data "aws_iam_policy" "AWSCodeCommitPowerUser" {
  arn = "arn:aws:iam::aws:policy/AWSCodeCommitPowerUser"
}

resource "aws_iam_role_policy_attachment" "attach_codecommit_policy" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = data.aws_iam_policy.AWSCodeCommitPowerUser.arn
}
