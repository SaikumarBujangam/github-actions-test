###################
# Security Groups
###################
resource "aws_security_group" "endpoint" {
  name                   = "${var.env}-${var.platform}-endpoint-sg"
  description            = "Endpoint Security group"
  vpc_id                 = aws_vpc.this.id
  revoke_rules_on_delete = var.revoke_rules_on_delete

  tags = merge(
    {
      "Name"      = "${var.env}-${var.platform}-endpoint-sg"
      "Terraform" = true
    },
  )
}

resource "aws_security_group_rule" "endpoint_ingress" {
  count             = length(var.endpoint_ingress_rules)
  security_group_id = aws_security_group.endpoint.id
  type              = "ingress"

  cidr_blocks       = [var.vpc_cidr]
  description       = var.rules[var.endpoint_ingress_rules[count.index]][3]

  from_port         = var.rules[var.endpoint_ingress_rules[count.index]][0]
  to_port           = var.rules[var.endpoint_ingress_rules[count.index]][1]
  protocol          = var.rules[var.endpoint_ingress_rules[count.index]][2]
}

resource "aws_security_group_rule" "endpoint_egress" {
  count             = length(var.egress_rules)
  security_group_id = aws_security_group.endpoint.id
  type              = "egress"

  cidr_blocks       = ["0.0.0.0/0"]
  description       = var.rules[var.egress_rules[count.index]][3]

  from_port         = var.rules[var.egress_rules[count.index]][0]
  to_port           = var.rules[var.egress_rules[count.index]][1]
  protocol          = var.rules[var.egress_rules[count.index]][2]
}

variable "rules" {
  description = "Map of known security group rules (define as 'name' = ['from port', 'to port', 'protocol', 'description'])"
  type        = map(list(any))

  default = {
    all-all       = [-1, -1, "-1", "All protocols"]

    https-443-tcp = [443, 443, "tcp", "HTTPS"]
    http-8000-tcp = [8000, 8000, "tcp", "HTTP"]
    smtp-25-tcp   = [25, 25, "tcp", "SMTP"]
    mysql-tcp     = [13306, 13306, "tcp", "MySQL"]
  }
}

variable "platform" {
  description = "Platform name"
  type        = string
  default     = "starcap"
}

variable "env" {
  description = "Environment name"
  type        = string
}

variable "vpc_cidr" {
  description = "The CIDR block for the VPC. Default value is a valid CIDR, but not acceptable by AWS and should be overridden"
  type        = string
}

variable "azs" {
  description = "A list of availability zones names or ids in the region"
  type        = list(string)
  default     = []
}

variable "public_subnets_cidr" {
  description = "A list of public subnets CIDR inside the VPC"
  type        = list(string)
  default     = []
}

variable "application_subnets_cidr" {
  description = "A list of application subnets inside the VPC"
  type        = list(string)
  default     = []
}

variable "database_subnets_cidr" {
  description = "A list of database subnets inside the VPC"
  type        = list(string)
  default     = []
}

variable "aws_region" {
  description = "Region"
  type        = string
  default     = ""
}

variable "kamino_account_id" {
  description = "Kamino Account ID"
  type        = string
  default     = ""
}

variable "revoke_rules_on_delete" {
  description = "Instruct Terraform to revoke all of the Security Groups attached ingress and egress rules before deleting the rule itself. Enable for EMR."
  type        = bool
  default     = false
}

variable "egress_rules" {
  description = "List of ingress rules to create by name"
  type        = list(string)
  default     = ["all-all"]
}

variable "ec2_ingress_rules" {
  description = "List of ingress rules to create by name"
  type        = list(string)
  default     = ["http-8000-tcp", "smtp-25-tcp"]
}

variable "db_ingress_rules" {
  description = "List of ingress rules to create by name"
  type        = list(string)
  default     = ["mysql-tcp"]
}

variable "alb_ingress_rules" {
  description = "List of ingress rules to create by name"
  type        = list(string)
  default     = ["https-443-tcp"]
}

variable "endpoint_ingress_rules" {
  description = "List of ingress rules to create by endpoint"
  type        = list(string)
  default     = ["https-443-tcp"]
}

variable "allocated_storage" {
  description = "The allocated storage in gigabytes"
  type        = string
  default     = "100"
}

variable "storage_type" {
  description = "One of 'standard' (magnetic), 'gp2' (general purpose SSD), or 'io1' (provisioned IOPS SSD). The default is 'io1' if iops is specified, 'standard' if not. Note that this behaviour is different from the AWS web console, where the default is 'gp2'."
  type        = string
  default     = "io1"
}

variable "storage_encrypted" {
  description = "Specifies whether the DB instance is encrypted"
  type        = bool
  default     = true
}

variable "kms_key_id" {
  description = "The ARN for the KMS encryption key. If creating an encrypted replica, set this to the destination KMS ARN. If storage_encrypted is set to true and kms_key_id is not specified the default KMS key created in your account will be used"
  type        = string
  default     = ""
}

variable "replicate_source_db" {
  description = "Specifies that this resource is a Replicate database, and to use this value as the source database. This correlates to the identifier of another Amazon RDS Database to replicate."
  type        = string
  default     = ""
}

variable "snapshot_identifier" {
  description = "Specifies whether or not to create this database from a snapshot. This correlates to the snapshot ID you'd find in the RDS console, e.g: rds:production-2015-06-26-06-05."
  type        = string
  default     = ""
}

variable "license_model" {
  description = "License model information for this DB instance. Optional, but required for some DB engines, i.e. Oracle SE1"
  type        = string
  default     = ""
}

variable "iam_database_authentication_enabled" {
  description = "Specifies whether or mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled"
  type        = bool
  default     = false
}

variable "domain" {
  description = "The ID of the Directory Service Active Directory domain to create the instance in"
  type        = string
  default     = ""
}

variable "domain_iam_role_name" {
  description = "(Required if domain is provided) The name of the IAM role to be used when making API calls to the Directory Service"
  type        = string
  default     = ""
}

variable "engine" {
  description = "The database engine to use"
  type        = string
  default     = "mysql"
}

variable "engine_version" {
  description = "The engine version to use"
  type        = string
  default     = "8.0.28"
}

variable "instance_class" {
  description = "The instance type of the RDS instance"
  type        = string
  default     = "db.t4g.large"
}

variable "db_name" {
  description = "The DB name to create. If omitted, no database is created initially"
  type        = string
  default     = ""
}

variable "username" {
  description = "Username for the master DB user"
  type        = string
}

variable "password" {
  description = "Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file"
  type        = string
}

variable "port" {
  description = "The port on which the DB accepts connections"
  type        = string
  default     = "13306"
}

variable "final_snapshot_identifier" {
  description = "The name of your final DB snapshot when this DB instance is deleted."
  type        = string
  default     = null
}

variable "db_subnet_group_name" {
  description = "Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group. If unspecified, will be created in the default VPC"
  type        = string
  default     = ""
}

variable "parameter_group_name" {
  description = "Name of the DB parameter group to associate"
  type        = string
  default     = ""
}

variable "availability_zone" {
  description = "The Availability Zone of the RDS instance"
  type        = string
  default     = ""
}

variable "multi_az" {
  description = "Specifies if the RDS instance is multi-AZ"
  type        = bool
  default     = true
}

variable "iops" {
  description = "The amount of provisioned IOPS. Setting this implies a storage_type of 'io1'"
  type        = number
  default     = 1000
}

variable "publicly_accessible" {
  description = "Bool to control if instance is publicly accessible"
  type        = bool
  default     = false
}

variable "monitoring_interval" {
  description = "The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid Values: 0, 1, 5, 10, 15, 30, 60."
  type        = number
  default     = 0
}

variable "monitoring_role_arn" {
  description = "The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. Must be specified if monitoring_interval is non-zero."
  type        = string
  default     = ""
}

variable "monitoring_role_name" {
  description = "Name of the IAM role which will be created when create_monitoring_role is enabled."
  type        = string
  default     = "rds-monitoring-role"
}

variable "create_monitoring_role" {
  description = "Create IAM role with a defined name that permits RDS to send enhanced monitoring metrics to CloudWatch Logs."
  type        = bool
  default     = false
}

variable "allow_major_version_upgrade" {
  description = "Indicates that major version upgrades are allowed. Changing this parameter does not result in an outage and the change is asynchronously applied as soon as possible"
  type        = bool
  default     = false
}

variable "auto_minor_version_upgrade" {
  description = "Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window"
  type        = bool
  default     = true
}

variable "apply_immediately" {
  description = "Specifies whether any database modifications are applied immediately, or during the next maintenance window"
  type        = bool
  default     = true
}

variable "maintenance_window" {
  description = "The window to perform maintenance in. Syntax: 'ddd:hh24:mi-ddd:hh24:mi'. Eg: 'Mon:00:00-Mon:03:00'"
  type        = string
  default     = "Mon:00:00-Mon:03:00"
}

variable "skip_final_snapshot" {
  description = "Determines whether a final DB snapshot is created before the DB instance is deleted. If true is specified, no DBSnapshot is created. If false is specified, a DB snapshot is created before the DB instance is deleted, using the value from final_snapshot_identifier"
  type        = bool
  default     = true
}

variable "copy_tags_to_snapshot" {
  description = "On delete, copy all Instance tags to the final snapshot (if final_snapshot_identifier is specified)"
  type        = bool
  default     = false
}

variable "backup_retention_period" {
  description = "The days to retain backups for"
  type        = number
  default     = 7
}

variable "backup_window" {
  description = "The daily time range (in UTC) during which automated backups are created if they are enabled. Example: '09:46-10:16'. Must not overlap with maintenance_window"
  type        = string
  default     = "03:00-06:00"
}

variable "option_group_name" {
  description = "Name of the DB option group to associate."
  type        = string
  default     = ""
}

variable "timezone" {
  description = "(Optional) Time zone of the DB instance. timezone is currently only supported by Microsoft SQL Server. The timezone can only be set on creation. See MSSQL User Guide for more information."
  type        = string
  default     = ""
}

variable "character_set_name" {
  description = "(Optional) The character set name to use for DB encoding in Oracle instances. This can't be changed. See Oracle Character Sets Supported in Amazon RDS for more information"
  type        = string
  default     = ""
}

variable "enabled_cloudwatch_logs_exports" {
  description = "List of log types to enable for exporting to CloudWatch logs. If omitted, no logs will be exported. Valid values (depending on engine): alert, audit, error, general, listener, slowquery, trace, postgresql (PostgreSQL), upgrade (PostgreSQL)."
  type        = list(string)
  default     = []
}

variable "timeouts" {
  description = "(Optional) Updated Terraform resource management timeouts. Applies to `aws_db_instance` in particular to permit resource management times"
  type        = map(string)
  default = {
    create = "40m"
    update = "80m"
    delete = "40m"
  }
}

variable "deletion_protection" {
  description = "The database can't be deleted when this value is set to true."
  type        = bool
  default     = false
}

variable "performance_insights_enabled" {
  description = "Specifies whether Performance Insights are enabled"
  type        = bool
  default     = false
}

variable "performance_insights_retention_period" {
  description = "The amount of time in days to retain Performance Insights data. Either 7 (7 days) or 731 (2 years)."
  type        = number
  default     = 7
}

variable "max_allocated_storage" {
  description = "Specifies the value for Storage Autoscaling"
  type        = number
  default     = 0
}

variable "ca_cert_identifier" {
  description = "Specifies the identifier of the CA certificate for the DB instance"
  type        = string
  default     = "rds-ca-2019"
}

variable "delete_automated_backups" {
  description = "Specifies whether to remove automated backups immediately after the DB instance is deleted"
  type        = bool
  default     = true
}

variable "iam_partition" {
  description = "IAM Partition to use when generating ARN's. For most regions this can be left at default. China/Govcloud use different partitions"
  type        = string
  default     = "aws"
}

variable "ami" {
  description = "ID of AMI to use for the instance"
  type        = list(string)
  default     = ["NavifyAMI-20221003-1137-6.1.8-Ubuntu18.04-Base"]
}

variable "owner" {
  description = "Owner of AMI to use for the instance"
  type        = list(string)
  default     = ["070492428385"]
}

variable "instance_type" {
  description = "The type of instance to start"
  type        = string
  default     = "m6i.xlarge"
}

variable "user_data" {
  description = "The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see user_data_base64 instead."
  type        = string
  default     = null
}

variable "repository_url" {
  description = "NFTower Repository URL"
  type        = string
  default     = "cr.seqera.io/private/nf-tower-enterprise"
  sensitive   = true
}

variable "backend_tag" {
  description = "Seqera Version Taf for Backend"
  type        = string
  default     = "v23.1.3"
}

variable "frontend_tag" {
  description = "Seqera Version Taf for Frontend"
  type        = string
  default     = "v23.1.3"
}

variable "routename" {
  description = "The record name to be created"
  type        = string
  default     = ""
}

variable "tower_contact_email" {
  description = "NFTower Contact Email"
  type        = string
  default     = ""
}

variable "tower_jwt_secret" {
  description = "NFTower JWT Secret"
  type        = string
  default     = ""
  sensitive   = true
}

variable "tower_crypto_secretkey" {
  description = "NFTower Crypto SecretKey"
  type        = string
  default     = ""
  sensitive   = true
}

variable "tower_license" {
  description = "NFTower License"
  type        = string
  default     = ""
  sensitive   = true
}

variable "tower_root_users" {
  description = "NFTower Root Users"
  type        = string
  default     = ""
}

variable "tower_db_user" {
  description = "NFTower Tower DB User"
  type        = string
  default     = ""
  sensitive   = true
}

variable "tower_db_password" {
  description = "NFTower Tower DB Password"
  type        = string
  default     = ""
  sensitive   = true
}

variable "tower_smtp_host" {
  description = "NFTower SMTP Host"
  type        = string
  default     = ""
}

variable "tower_smtp_port" {
  description = "NFTower SMTP Port"
  type        = number
  default     = 587
}

variable "tower_enable_wave" {
  description = "Controls wave enable"
  type        = bool
  default     = true
}

variable "tower_ssl_version" {
  description = "Tower SSL Version"
  type        = string
  default     = "TLSv1.2"
}

variable "tower_auth_flag" {
  description = "Flag to create tower auth"
  type        = bool
  default     = false
}

variable "tower_starttls_flag" {
  description = "Flag to create tower starttls flag"
  type        = bool
  default     = false
}

variable "tower_starttls_req_flag" {
  description = "Flag to create tower starttls requred flag"
  type        = bool
  default     = false
}

/*variable "smtp_user_name" {
  description = "SMTP IAM User Name"
  type        = string
}*/

variable "root_block_device" {
  description = "Customize details about the root block device of the instance. See Block Devices below for details"
  type        = list(map(string))
  default     = [
    {
      volume_type  = "gp2"
      volume_size  = "250"
    }
  ]
}

variable "domainname" {
  type    = string
  default = ""
}

variable "stage_name" {
  description = "API Gateway stage Name"
  type        = string
  default     = ""
}

variable "app_region" {
  description = "The Region Name where AWS resources WAF will be deployed"
  type        = string
  default     = "eu-central-1"
}

variable "identity" {
  description = "Name of identity"
  type        = string
  default     = ""
}

variable "internal" {
  description = "Controls if load balancer is internal or internet facing"
  type        = bool
  default     = false
}

variable "load_balancer_type" {
  description = "Specifies the load balancer type"
  type        = string
  default     = "application"
}

variable "enable_deletion_protection" {
  description = "Controls if load balancer is internal or internet facing"
  type        = bool
  default     = false
}

variable "http_protocol" {
  description = "The protocol for the ALB target group"
  type        = string
  default     = "HTTP"
}

variable "https_protocol" {
  description = "The protocol for the ALB target group"
  type        = string
  default     = "HTTPS"
}

variable "ssl_policy" {
  description = "The dafault SSL policy"
  type        = string
  default     = "ELBSecurityPolicy-FS-1-2-Res-2020-10"
}

variable "type" {
  description = "The type of action in LB Listener"
  type        = string
  default     = "forward"
}

variable "record_type" {
  description = "The record type to be created"
  type        = string
  default     = "CNAME"
}

variable "ssm_endpoint_private_dns_enabled" {
  description = "Whether or not to associate a private hosted zone with the specified VPC for SSM endpoint"
  type        = bool
  default     = true
}

variable "ssmmessages_endpoint_private_dns_enabled" {
  description = "Whether or not to associate a private hosted zone with the specified VPC for SSMMESSAGES endpoint"
  type        = bool
  default     = true
}

variable "ec2messages_endpoint_private_dns_enabled" {
  description = "Whether or not to associate a private hosted zone with the specified VPC for EC2MESSAGES endpoint"
  type        = bool
  default     = true
}
