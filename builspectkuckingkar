 
##################################### 
# cloudwatch metric alarm
#####################################
resource "aws_cloudwatch_metric_alarm" "fsx_autoscaling" {
  alarm_name                = "${var.project_uid}-${var.fsx_name}-cw-alarm"
  #alarm_name                = "cw-alarm"
  comparison_operator       = "LessThanOrEqualToThreshold"
  evaluation_periods        = "2"
  metric_name               = "FreeDataStorageCapacity"
  namespace                 = "AWS/FSx"
  period                    = "60"
  statistic                 = "Sum"
  threshold                 = "263882790666.24" #"257698037760" (245.76 GB is 20% out of 1228.8 GB --in bytes)
  alarm_description         = "This metric monitors fsx StorageCapacity utilization"
  insufficient_data_actions = []
  
  dimensions = {
        FileSystemId = "${var.fsx_id}"
      }
  }

##################################### 
# cloudwatch event rule
#####################################
resource "aws_cloudwatch_event_rule" "fsx_autoscaling" {
  name        = "${var.project_uid}-${var.fsx_name}-cw-rule"
 #name        = "cw-rule"
  description = "Monitor cloudwatch alarm to trigger event bridge"

  event_pattern = <<PATTERN
{
  "source": ["aws.cloudwatch"],
  "detail-type": ["CloudWatch Alarm State Change"],
  "resources": ["${aws_cloudwatch_metric_alarm.fsx_autoscaling.arn}"],
  "detail": {
      "state": {
          "value": [
              "ALARM"
          ]
      }
  }
}
PATTERN
}

##################################### 
# cloudwatch event target
#####################################
resource "aws_cloudwatch_event_target" "fsx_autoscaling" {
  arn  = aws_lambda_function.fsx_autoscaling.arn
  rule = aws_cloudwatch_event_rule.fsx_autoscaling.id
  
    input = <<JSON
    
{
  "fsx_id": "${var.fsx_id}",
  "ui_api_endpoint": "https://${var.region_short}.api.${var.redcap_ui_api}.platform.navify.com/redcap/project/v1/api/",
  "sqs_email_queue": "https://sqs.${var.app_region}.amazonaws.com/${var.aws_account}/redcap-email-send-q",
  "navify_tenant": "${var.navify_tenant}"
}
JSON
depends_on = [aws_lambda_function.fsx_autoscaling]
}

##################################### 
# lambda basic permission
#####################################
resource "aws_lambda_permission" "allow_cloudwatch" {
    statement_id = "AllowExecutionFromCloudWatch"
    action = "lambda:InvokeFunction"
    function_name = aws_lambda_function.fsx_autoscaling.function_name
    principal = "events.amazonaws.com"
    source_arn = aws_cloudwatch_event_rule.fsx_autoscaling.arn
}

##################################### 
#Arquive the script
#####################################
data "archive_file" "python_lambda_package" {
  type = "zip"
  source_file = "${path.module}/code/lambda_function.py"
  output_path = "fsx-lambda.zip"
}

#####################################
#  Create the lamda function
#####################################
resource "aws_lambda_function" "fsx_autoscaling" {
    function_name = "${var.project_uid}-${var.fsx_name}-lambda"
    
    filename         = "fsx-lambda.zip"
    source_code_hash = data.archive_file.python_lambda_package.output_base64sha256
    role             = aws_iam_role.lambda_role.arn
    runtime          = "python3.8"
    handler          = "lambda_function.lambda_handler"
    timeout          = 10
}

#####################################
#  Create user role for lambda function
#####################################
data "aws_iam_policy_document" "lambda_assume_role_policy" {
  statement {
    effect = "Allow"
    actions = ["sts:AssumeRole"]

    principals {
      type = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "lambda_role" {
  name = "${var.project_uid}-${var.fsx_name}-lambda-role"
  assume_role_policy = data.aws_iam_policy_document.lambda_assume_role_policy.json
}

 data "aws_iam_policy_document" "lambda_role_policy_document" {
   statement {
     effect = "Allow"

     actions = [
      "fsx:UpdateFileSystem",
      "fsx:DescribeFileSystems",
      "sqs:SendMessage",
      "secretsmanager:GetSecretValue",
      "secretsmanager:DescribeSecret",
      "ssm:GetParameter",
      "sns:Publish",
	  "cloudwatch:PutMetricAlarm"
     ]

     resources = ["*"]
	  }
 }

 resource "aws_iam_role_policy" "fsx-autoscaling_policy" {
   name = "${var.project_uid}-${var.fsx_name}-lambda-policy"
   policy = data.aws_iam_policy_document.lambda_role_policy_document.json
   role = aws_iam_role.lambda_role.id
 }

 resource "aws_iam_role_policy_attachment" "basic" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.lambda_role.name
}
