# EFS 
#############
module "efs" {
    source = "../../terraform-modules/terraform-aws-efs"
    creation_token = "${var.org_key}-persistent_storage"
    subnet_ids = data.aws_subnets.domain_subnets.ids
    security_groups = [module.eks.cluster_primary_security_group_id]
    tags = {
    Name = "${var.org_key}-persistent-storage"
  }
}

# EFS - Access Points
resource "aws_efs_access_point" "bitnami-directory" {
  file_system_id = module.efs.id
  posix_user {
    gid = 1000
    uid = 1000
  }

  root_directory {
    path = "/bitnami"
    creation_info {
      owner_gid   = 1000
      owner_uid   = 1000
      permissions = "777"
    }
  }
}

resource "aws_efs_access_point" "discourse-directory" {
  file_system_id = module.efs.id
  posix_user {
    gid = 0
    uid = 1000
  }

  root_directory {
    path = "/bitnami/discourse"
    creation_info {
      owner_gid   = 0
      owner_uid   = 1000
      permissions = "755"
    }
  }
}

resource "aws_efs_access_point" "data-directory" {
  file_system_id = module.efs.id
  posix_user {
    gid = 1000
    uid = 1000
  }

  root_directory {
    path = "/data"
    creation_info {
      owner_gid   = 1000
      owner_uid   = 1000
      permissions = "777"
    }
  }
}

resource "aws_efs_access_point" "postgresql-directory" {
  file_system_id = module.efs.id
  posix_user {
    gid = 1001
    uid = 1001
  }

  root_directory {
    path = "/bitnami/postgresql"
    creation_info {
      owner_gid   = 1001
      owner_uid   = 1001
      permissions = "777"
    }
  }
}

resource "kubernetes_storage_class" "efs-sc" {
  depends_on = [
    module.efs
  ]
  metadata {
    name = "efs-sc"
    annotations = {
      "storageclass.kubernetes.io/is-default-class" = "true"
    }
  }
  storage_provisioner = "efs.csi.aws.com"
  reclaim_policy = "Retain"
  
  parameters = {
    type = "pd-ssd"
    fileSystemId = module.efs.id
    directoryPerms = "777"
  }
}

resource "kubernetes_persistent_volume_v1" "discourse-persistent-volume" {
  depends_on = [kubernetes_storage_class.efs-sc]

  metadata {
    name = "discourse-efs-pvc-discourse"
  }
  spec {
    capacity = {
      storage = "100Gi"
    }
    access_modes = ["ReadWriteMany"]
    persistent_volume_source {
      csi {
        driver        = "efs.csi.aws.com"
        volume_handle = "${module.efs.id}::${aws_efs_access_point.discourse-directory.id}"
      }
    }
    storage_class_name = kubernetes_storage_class.efs-sc.metadata.0.name
    volume_mode = "Filesystem"
    persistent_volume_reclaim_policy = "Retain"
  }
}

resource "kubernetes_persistent_volume_claim_v1" "discourse-persistent-volume-claim" {
  depends_on = [kubernetes_persistent_volume_v1.discourse-persistent-volume]
  metadata {
    name = "my-discourse-0"
  }
  spec {
    access_modes = ["ReadWriteMany"]
    resources {
      requests = {
        storage = "100Gi"
      }
    }
    volume_name = kubernetes_persistent_volume_v1.discourse-persistent-volume.metadata.0.name
    storage_class_name = kubernetes_storage_class.efs-sc.metadata.0.name
  }
  wait_until_bound = true
}

resource "kubernetes_persistent_volume_v1" "postgres-persistent-volume" {
  depends_on = [kubernetes_storage_class.efs-sc]

  metadata {
    name = lower("${var.org_key}-discourse-efs-pvc-postgres")
  }
  spec {
    capacity = {
      storage = "100Gi"
    }
    access_modes = ["ReadWriteMany"]
    persistent_volume_source {
      csi {
        driver        = "efs.csi.aws.com"
        volume_handle = "${module.efs.id}::${aws_efs_access_point.postgresql-directory.id}"
      }
    }
    storage_class_name = kubernetes_storage_class.efs-sc.metadata.0.name
    volume_mode = "Filesystem"
    persistent_volume_reclaim_policy = "Retain"
  }
}

resource "kubernetes_persistent_volume_claim_v1" "postgres-persistent-volume-claim" {
  depends_on = [kubernetes_persistent_volume_v1.postgres-persistent-volume]
  metadata {
    name = lower("data-${var.org_key}-my-discourse-postgresql-0")
  }
  spec {
    access_modes = ["ReadWriteMany"]
    resources {
      requests = {
        storage = "100Gi"
      }
    }
    volume_name = kubernetes_persistent_volume_v1.postgres-persistent-volume.metadata.0.name
    storage_class_name = kubernetes_storage_class.efs-sc.metadata.0.name
  }
  wait_until_bound = true
}

resource "kubernetes_persistent_volume_v1" "redis-persistent-volume" {
  depends_on = [kubernetes_storage_class.efs-sc]

  metadata {
    name = lower("${var.org_key}-discourse-efs-pvc-redis")
  }
  spec {
    capacity = {
      storage = "100Gi"
    }
    access_modes = ["ReadWriteMany"]
    persistent_volume_source {
      csi {
        driver        = "efs.csi.aws.com"
        volume_handle = "${module.efs.id}::${aws_efs_access_point.data-directory.id}"
      }
    }
    storage_class_name = kubernetes_storage_class.efs-sc.metadata.0.name
    volume_mode = "Filesystem"
    persistent_volume_reclaim_policy = "Retain"
  }
}

resource "kubernetes_persistent_volume_claim_v1" "redis-persistent-volume-claim" {
  depends_on = [kubernetes_persistent_volume_v1.redis-persistent-volume]

  metadata {
    name = lower("redis-data-${var.org_key}-my-discourse-redis-master-0")
  }
  spec {
    access_modes = ["ReadWriteMany"]
    resources {
      requests = {
        storage = "100Gi"
      }
    }
    volume_name = kubernetes_persistent_volume_v1.redis-persistent-volume.metadata.0.name
    storage_class_name = kubernetes_storage_class.efs-sc.metadata.0.name
  }
  wait_until_bound = true
}
