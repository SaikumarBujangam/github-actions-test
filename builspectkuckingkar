import boto3
import json
from argparse import ArgumentParser
from alight.foundation.util.logging.standardlogger import StandardLogger

class RedshiftObjectToJSONSchema:
	logger = StandardLogger().getDefaultLogger()
	def __init__(self, region_name, username, cluster_id):
		self.region_name = region_name
		self.username = username
		self.cluster_id = cluster_id
		self.redshift_client = boto3.client('redshift', region_name=region_name)

	def get_object_schema(self, database_name, schema_name, object_name):
		try:
			response = self.redshift_client.describe_table(
				DatabaseName=database_name,
				Schema=schema_name,
				TableName=object_name,
				DbUser=self.username
			)
			object_schema = {
				"Database": database_name,
				"Schema": schema_name,
				"ObjectName": object_name,
				"Fields": []
		    }
			for column in response['Table']['Columns']:
				field = {
					"FieldName": column['Name'],
					"FieldType": column['Type'],
					"FieldPrecision": column.get('Precision', None),
					"EncodingCompression": column.get('Encoding', None)
				}
				object_schema['Fields'].append(field)
			return json.dumps(object_schema, indent=4)
		except Exception as e:
			RedshiftObjectToJSONSchema.logger.error(str(e))
			raise
if __name__=="__main__":
	try:
		parser = ArgumentParser()
		parser.add_argument("--username", action="store", dest="db_user", required=True, help="the username for database authentication")
		parser.add_argument("--cluster-id", action="store", dest="cluster-id", required=True, help="the identifier of the Redshift cluster to use")
		parser.add_argument("--database", action="store", dest="db_name", required=True, help="the name of the Redshift database to use")
		parser.add_argument("--schema", action="store", dest="schema_name", required=True, help="the name of the Redshift schema to inspect")
		parser.add_argument("--object", action="store", dest="object_name", required=True, help="the name of the Redshift object (table or view) to extract schema for")
		parser.add_argument("--output-file", action="store", dest="output_file", required=False, default=None, help="the optional name of the file to write the JSON schema information to")
		parser.add_argument("--aws-region", action="store", dest="aws_region", required=False, default="us-east-1", help="the AWS region to use")

		args = parser.parse_args()
		object_extractor = RedshiftObjectToJSONSchema(args.aws_region, args.db_user, args.cluster_id)
		object_schema_json = object_extractor.get_object_schema(args.db_name, args.schema_name, args.object_name)

		if object_schema_json.startswith("Error:"):
			RedshiftObjectToJSONSchema.logger.info(object_schema_json)
			exit(-1)
		if args.output_file is not None:
			output_filename = args.output_file
		else:
			output_filename = args.object_name + ".json"
		with open(output_filename, "wt") as output_file:
			output_file.write(object_schema_json)
		RedshiftObjectToJSONSchema.logger.info("JSON schema for {} successfully written to {}".format(args.object_name, output_filename))
		exit(0)
	except Exception as e:
		RedshiftObjectToJSONSchema.logger.error(e)
		exit(-1)
