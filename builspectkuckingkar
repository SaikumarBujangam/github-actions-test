import unittest
from alight.foundation.postgres.postgresdataapi import PostgresDataAPI
from alight.foundation.util.argparsebuilder import GenerateParser
from alight.foundation.util.logging.standardlogger import StandardLogger

class TestPostgresDataAPI(unittest.TestCase):
    logger = StandardLogger().getDefaultLogger()
    def setUp(self):
        # Replace with actual database connection parameters for testing
        self.data_api = PostgresDataAPI(db_name='postgres', db_user_name='dbusername', db_host='adl-com-d1-cdp-dcnexus.cgs723tlzdrk.us-east-1.rds.amazonaws.com', db_password='Password123$')
        self.data_api.connect()

    def tearDown(self):
        # Close the database connection after testing
        self.postgres_api.close_connection()

    def test_connection(self):
        self.assertTrue(self.data_api._conn is not None)
        self.assertTrue(self.data_api._cursor is not None)

    def test_create_table(self):
        # Test creating a table in the PostgreSQL database
        sql_statement = "CREATE TABLE IF NOT EXISTS test_cicd.test_table (id serial PRIMARY KEY, name VARCHAR);"
        self.postgres_api.execute_sql(sql_statement)
        
        # Perform additional assertions if needed

    def test_select_from_table(self):
        # Test selecting data from a table in the PostgreSQL database
        sql_statement = "SELECT * FROM test_cicd.test_table;"
        query_id, response = self.postgres_api.execute_sql(sql_statement)
        self.assertEqual(response, "FINISHED")

        # Perform additional assertions if needed

    def test_table_not_created_in_schema(self):
        # Test a scenario where a table was not created, and the query should fail
        sql_statement = "SELECT * FROM test_cicd.non_existent_table;"
        query_id, response = self.postgres_api.execute_sql(sql_statement)
        self.assertEqual(response, "FAILED")

        # Perform additional assertions if needed
