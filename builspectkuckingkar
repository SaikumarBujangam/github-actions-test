#####################################
#  Create the lamda function
#####################################
resource "aws_lambda_function" "fsx_autoscaling" {
    function_name = "${var.project_uid}-${var.fsx_name}-lambda"
    
    filename         = "fsx-lambda.zip"
    source_code_hash = data.archive_file.python_lambda_package.output_base64sha256
    role             = aws_iam_role.lambda_role.arn
    runtime          = "python3.8"
    handler          = "lambda_function.lambda_handler"
    timeout          = 10
}

#####################################
#  Create user role for lambda function
#####################################
data "aws_iam_policy_document" "lambda_assume_role_policy" {
  statement {
    effect = "Allow"
    actions = ["sts:AssumeRole"]

    principals {
      type = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "lambda_role" {
  name = "${var.project_uid}-${var.fsx_name}-lambda-role"
  assume_role_policy = data.aws_iam_policy_document.lambda_assume_role_policy.json
}

 data "aws_iam_policy_document" "lambda_role_policy_document" {
   statement {
     effect = "Allow"

     actions = [
      "fsx:UpdateFileSystem",
      "fsx:DescribeFileSystems",
      "sqs:SendMessage",
      "secretsmanager:GetSecretValue",
      "secretsmanager:DescribeSecret",
      "ssm:GetParameter",
      "sns:Publish",
	  "cloudwatch:PutMetricAlarm"
     ]

     resources = ["*"]
	  }
 }

 resource "aws_iam_role_policy" "fsx-autoscaling_policy" {
   name = "${var.project_uid}-${var.fsx_name}-lambda-policy"
   policy = data.aws_iam_policy_document.lambda_role_policy_document.json
   role = aws_iam_role.lambda_role.id
 }

 resource "aws_iam_role_policy_attachment" "basic" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.lambda_role.name
}
