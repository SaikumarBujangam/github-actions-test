from unittest import TestCase

import boto3

from alight.foundation.redshift.datapi import DataAPI
from alight.foundation.util.argparsebuilder import GenerateParser
from alight.foundation.util.logging.standardlogger import StandardLogger


class DataAPITestCase(TestCase):
    def test_create_table(self):
        dataapiClient = DataAPI(db_cluster_id="adl-com-d1-data-rsproducer", db_name="rsproducerdb01", db_user_name="david.madison")
        dataapiClient.execute_sql(sql_statement="DROP TABLE IF EXISTS scratch.adl_awsdeploy_cicd_unit_test_1; CREATE TABLE IF NOT EXISTS scratch.adl_awsdeploy_cicd_unit_test_1 (field1 integer);", with_event=True)
        q_id, response = dataapiClient.execute_sql(sql_statement="select count(field1) from scratch.adl_awsdeploy_cicd_unit_test_1;", with_event=True)
        self.assertEqual(response, "FINISHED")

    def test_create_table_with_parameters(self):
        dataapiClient = DataAPI(db_cluster_id="adl-com-d1-data-rsproducer", db_name="rsproducerdb01", db_user_name="david.madison")
        q_id, response = dataapiClient.execute_sql(sql_statement="DROP TABLE IF EXISTS :schema_name.adl_awsdeploy_cicd_unit_test_1; CREATE TABLE IF NOT EXISTS scratch.adl_awsdeploy_cicd_unit_test_1 (field1 integer);", parameters=[{"name":"schema_name", "value":"adl_awsdeploy_cicd_unit_test_5"}], with_event=True)
        self.assertEqual(response, "FINISHED")
        q_id, response = dataapiClient.execute_sql(sql_statement="select count(field1) from scratch.adl_awsdeploy_cicd_unit_test_5;", with_event=True)
        self.assertEqual(response, "FINISHED")

    def test_was_not_created(self):
        dataapiClient = DataAPI(db_cluster_id="adl-com-d1-data-rsproducer", db_name="rsproducerdb01", db_user_name="david.madison")
        dataapiClient.execute_sql(sql_statement="DROP TABLE IF EXISTS scratch.adl_awsdeploy_cicd_unit_test_1; CREATE TABLE IF NOT EXISTS scratch.adl_awsdeploy_cicd_unit_test_1 (field1 integer);", with_event=True)
        q_id, response = dataapiClient.execute_sql(sql_statement="select count(field1) from scratch.adl_bad_name_awsdeploy_cicd_unit_test_1;", with_event=True)
        self.assertEqual(response, "FAILED")

    def test_create_table_multiple_schemas(self):
        args = GenerateParser(["--base-arg-parser-config-file-location", "config", "--base-arg-parser-config-file-name", "redshift-build-args.json", "--artifact-ddl-file", "tests/config/adl_awsdeploy_cicd_unit_test_1.ddl", "--db-name", "rsproducerdb01", "--db-user-name", "david.madison", "--db-cluster-id", "adl-com-d1-data-rsproducer", "--db-schema-list", "scratch,scratch"]).build()
        dataapiClient = DataAPI(db_cluster_id=args.dbClusterId, db_name=args.dbName, db_user_name=args.dbUserName)

        with open(args.artifactDdlFile) as ddl_file:
            ddl_statement=ddl_file.read()
            for schema_name in args.dbSchemaList.split(","):
                execution_statement = []
                if schema_name != "EMBEDDED":
                    execution_statement.append("set search_path to {}".format(schema_name))
                execution_statement.append(ddl_statement)
                q_id, response = dataapiClient.execute_sql(sql_statement=";\n".join(execution_statement), with_event=args.dbWithEvent)
                self.assertEqual(response, "FINISHED")
