cd ./live/devops/eu-central-1/pipelines-common && terragrunt run-all validate --terragrunt-non-interactive
time=2023-11-09T19:09:29+05:30 level=info msg=The stack at C:/Users/umababy.kannan/OneDrive - HCL Technologies Ltd/Documents/Star CAP/devops-infra/live/devops/eu-central-1/pipelines-common will be processed in the following order for command validate:
Group 1
- Module C:/Users/umababy.kannan/OneDrive - HCL Technologies Ltd/Documents/Star CAP/devops-infra/live/devops/eu-central-1/pipelines-common


╷
│ Error: Not enough function arguments
│
│   on main.tf line 179, in resource "aws_s3_bucket_policy" "lambda_bucket_policy":
│  179:   policy = templatefile("${path.module}/../aws-common/templates/s3_bucket_lambda_build_policy.tpl")
│     ├────────────────
│     │ path.module is "."
│
│ Function "templatefile" expects 2 argument(s). Missing value for "vars".
╵
time=2023-11-09T19:09:39+05:30 level=error msg=Terraform invocation failed in C:/.terragrunt-cache/I7i1IXTAEuR3_ZL_zIqC6bJrfMc/Xd3worWQ1ige-pHfmIDhnYcFAvo/pipelines-common prefix=[C:\Users\umababy.kannan\OneDrive - HCL Technologies Ltd\Documents\Star CAP\devops-infra\live\devops\eu-central-1\pipelines-common]
time=2023-11-09T19:09:39+05:30 level=error msg=Module C:/Users/umababy.kannan/OneDrive - HCL Technologies Ltd/Documents/Star CAP/devops-infra/live/devops/eu-central-1/pipelines-common has finished with an error: 1 error occurred:
        * exit status 1

 prefix=[C:\Users\umababy.kannan\OneDrive - HCL Technologies Ltd\Documents\Star CAP\devops-infra\live\devops\eu-central-1\pipelines-common]
time=2023-11-09T19:09:39+05:30 level=error msg=1 error occurred:
        * exit status 1


make: *** [Makefile:14: validate] Error 1
module "platform_repositories" {
  source                      = "../aws-common/codecommit"
  for_each                    = var.repository_names
  codecommit_repository_name  = each.value
}

module "env_terraform_backend_state" {
  source = ".//terraform-backend-state"
}

module "dev_ecr_repository" {
  source          = "../aws-common/ecr"

  repository_name = "dev-microservices-repository"                  
}

data "aws_iam_policy_document" "ecr_policy" {
  statement {
    sid    = "new statement"
    effect = "Allow"

    principals {
      type        = "AWS"
      identifiers = ["${var.dev_account_id}", "${var.qa_account_id}"]
    }

    actions = [
      "ecr:GetDownloadUrlForLayer",
      "ecr:BatchGetImage",
    ]
  }
}


resource "aws_ecr_repository_policy" "ecr_policy" {
  repository = module.dev_ecr_repository.ecr_repo_name
  policy     = data.aws_iam_policy_document.ecr_policy.json
}

module "dev_update_config_management" {
  source = ".//utilities/config-management-update-utility"

  codebuild_role_arn                  = module.dev_pipeline_iam_role.codebuild_arn
  artifact_encryption_key_arn         = module.dev_pipeline_artifacts.artifact_encryption_key_arn
  codebuild_artifacts_bucket_name     = module.dev_pipeline_artifacts.codebuild_artifacts_bucket_name
  env_name                            = "dev"
}

module "dev_restart_microservices" {
  source = ".//utilities/restart-microservices-utility"

  codebuild_role_arn                  = module.dev_pipeline_iam_role.codebuild_arn
  artifact_encryption_key_arn         = module.dev_pipeline_artifacts.artifact_encryption_key_arn
  codebuild_artifacts_bucket_name     = module.dev_pipeline_artifacts.codebuild_artifacts_bucket_name
  env_name                            = "dev"
}

module "common_update_config_management" {
  source = ".//utilities/config-management-update-utility"

  codebuild_role_arn                  = module.qa_pipeline_iam_role.codebuild_arn
  artifact_encryption_key_arn         = module.qa_pipeline_artifacts.artifact_encryption_key_arn
  codebuild_artifacts_bucket_name     = module.qa_pipeline_artifacts.codebuild_artifacts_bucket_name
  env_name                            = "common"
}

module "common_restart_microservices" {
  source = ".//utilities/restart-microservices-utility"

  codebuild_role_arn                  = module.qa_pipeline_iam_role.codebuild_arn
  artifact_encryption_key_arn         = module.qa_pipeline_artifacts.artifact_encryption_key_arn
  codebuild_artifacts_bucket_name     = module.qa_pipeline_artifacts.codebuild_artifacts_bucket_name
  env_name                            = "common"
}


module "dev_pipeline_iam_role" {
  source = ".//roles"
  environment = "dev"
  target_account_id = var.dev_account_id
}

module "dev_pipeline_artifacts" {
  source = ".//artifacts"
  environment = "dev"
}

### Microservices ECR for higher environments ###
module "microservice_ecr_repository" {
  source          = "../aws-common/ecr"

  repository_name = "microservices-repository"                  
}

data "aws_iam_policy_document" "microservice_ecr_policy" {
  statement {
    sid    = "new statement"
    effect = "Allow"

    principals {
      type        = "AWS"
      identifiers = ["${var.qa_account_id}", "${var.stg_account_id}","${var.prod_account_id}"]
    }

    actions = [
      "ecr:GetDownloadUrlForLayer",
      "ecr:BatchGetImage",
    ]
  }
}


resource "aws_ecr_repository_policy" "microservice_ecr_policy" {
  repository = module.microservice_ecr_repository.ecr_repo_name
  policy     = data.aws_iam_policy_document.microservice_ecr_policy.json
}

### QA Roles and Artifacts ###

module "qa_pipeline_iam_role" {
  source = ".//roles"
  environment = "qa"
  target_account_id = var.qa_account_id
}

module "qa_pipeline_artifacts" {
  source = ".//artifacts"
  environment = "qa"
}

### Stage Roles and Artifacts ###

module "stg_pipeline_iam_role" {
  source = ".//roles"
  environment = "stg"
  target_account_id = var.stg_account_id
}

module "stg_pipeline_artifacts" {
  source = ".//artifacts"
  environment = "stg"
}

### Production Roles and Artifacts

module "prod_pipeline_iam_role" {
  source = ".//roles"
  environment = "prod"
  target_account_id = var.prod_account_id
}

module "prod_pipeline_artifacts" {
  source = ".//artifacts"
  environment = "prod"
}

### dev2 Roles and Artifacts

module "dev2_pipeline_iam_role" {
  source = ".//roles"
  environment = "dev2"
  target_account_id = var.dev_account_id
}

module "dev2_pipeline_artifacts" {
  source = ".//artifacts"
  environment = "dev2"
}

# Creation of lambda source code s3 bucket
module "lambda_source_bucket" {
  source      = "../aws-common/s3"

  bucket_name = "starcap-lambda-build-artifact"
}

resource "aws_s3_bucket_policy" "lambda_bucket_policy" {
  bucket = module.lambda_source_bucket.s3_bucket_name
  policy = templatefile("${path.module}/../aws-common/templates/s3_bucket_lambda_build_policy.tpl")
}
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "s3:*",
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::231719417377:role/InfraBuildRole"
      },
      "Resource": "arn:aws:s3:::starcap-lambda-build-artifact/*",
      "Sid": "QAAccountAccess"
    },
    {
      "Action": "s3:*",
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::830238192966:role/InfraBuildRole"
      },
      "Resource": "arn:aws:s3:::starcap-lambda-build-artifact/*",
      "Sid": "StgAccountAccess"
    },
    {
      "Action": "s3:*",
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::580311079650:role/InfraBuildRole"
      },
      "Resource": "arn:aws:s3:::starcap-lambda-build-artifact/*",
      "Sid": "ProdAccountAccess"
    }
  ]
}
