import sys
from alight.foundation.postgres.postgresdataapi import PostgresDataAPI
from alight.foundation.util.argparsebuilder import GenerateParser
from alight.foundation.util.logging.standardlogger import StandardLogger
from alight.foundation.util.stringutil import StringUtil
from alight.foundation.redshift.utils.replacement import DDLVariableReplacer

if __name__ == "__main__":
    logger = StandardLogger().getDefaultLogger()
    try:
        command_args = GenerateParser(supports_duplicate_parameters=True).build()
        logger.info("Running {} file on host: {}. database: {}".format(
            command_args.artifactDdlFile, command_args.dbHost, command_args.dbName))
        
        postgres_api = PostgresDataAPI(
            db_name=command_args.dbName,
            db_user_name=command_args.dbUserName,
            db_host=command_args.dbHost,
            db_port=command_args.dbPort,
            db_password=command_args.dbPassword
        )

        su = StringUtil()
        replacement_params = su.property_list_to_dict(
            input_list=command_args.cicdVar)
        replacer = DDLVariableReplacer(parameter_dict=replacement_params)

        with open(command_args.artifactDdlFile) as ddl_file:
            ddl_statement = replacer.replace(ddl_file.read())

            execution_statement = []
            execution_statement.append(
                "set search_path to {}".format(command_args.dbSchema))
            execution_statement.append(ddl_statement)

            postgres_api.execute_sql(
                sql_statement=";\n".join(execution_statement),
                parameters=None
            )

    except Exception as e:
        logger.error(e)
        sys.exit(1)
