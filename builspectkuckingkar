import json
import sys
import os

from alight.foundation.util.bundle import TarBundler, BundleFileHandlerHelper
from alight.foundation.util.argparsebuilder import GenerateParser
from alight.foundation.util.dictionary import ParameterizedJson
from alight.foundation.util.logging.standardlogger import StandardLogger
from alight.foundation.util.stringutil import StringUtil

def filter_files(files, include_prefix):
    return [item for item in files if item.get('file_details', {}).get('source', '').startswith(include_prefix)]

def print_jars(file_list, source_root, destination_prefix, logger):
    for item in file_list:
        source_path = item.get('file_details', {}).get('source', '')
        destination = item.get('file_details', {}).get('destination', '')

        # Extracting jar name from the source path
        relative_path = os.path.relpath(source_path, source_root)
        if os.path.isfile(source_path) and relative_path.startswith("jars/") and source_path.endswith(".jar"):
            jar_name = os.path.basename(relative_path)
            logger.info("Jar Name: {}, Source: {}, Destination: {}".format(jar_name, source_path, destination))

if __name__ == "__main__":
    logger = StandardLogger().getDefaultLogger()
    try:
        command_args = GenerateParser(supports_duplicate_parameters=True).build()
        replacement_params = StringUtil().property_list_to_dict(input_list=command_args.cicdVar)
        tarfile = TarBundler(bundle_name="{}-{}.tar".format(command_args.tarFileName, command_args.pkgVersion), bundle_location=command_args.tarFileLocation)
        cicd_var = command_args.cicdVar
        cicd_var = cicd_var[0].split("=")
        with open(os.path.join(command_args.templateFileLocation, command_args.templateFileName), "r") as template_file:
            file_contents = dict(json.load(template_file))
            all_files = file_contents.get('files', [])
            included_files = filter_files(all_files, "jars/")
            excluded_files = [item for item in all_files if item not in included_files]

            handler = ParameterizedJson(json_str=json.dumps({"files": excluded_files}), parameter_dict=replacement_params)
            resulting_dict = json.loads(handler.generate_json_str())

        bundle_helper = BundleFileHandlerHelper(bundler=tarfile)
        logger.info("Creating Tar file: {}".format(tarfile.get_bundle_location()))
        bundle_helper.read_include_file_definition(file_definition=resulting_dict, source_root=command_args.sourceRoot)

        # Print jar file names, source paths, and destinations
        print_jars(included_files, command_args.sourceRoot, "", logger)

    except Exception as e:
        logger.error(e)
        sys.exit(1)
