import sys
import os
import time

import boto3
from alight.foundation.aws.codepipeline import PipelinePackager
from alight.foundation.aws.spec import AppspecGenerator
from alight.foundation.util.argparsebuilder import GenerateParser
from alight.foundation.util.logging.standardlogger import StandardLogger
from alight.foundation.util.stringutil import StringUtil

if __name__ == "__main__":
    logger = StandardLogger().getDefaultLogger()
    try:
        command_args = GenerateParser(supports_duplicate_parameters=True).build()
        su = StringUtil()
        replacement_params = su.property_list_to_dict(input_list=command_args.cicdVar)
        template_file_path = os.path.join(command_args.templateFileLocation, command_args.templateFile)
        appspec_file_path = os.path.join(command_args.generatedAppSpecLocation, command_args.generatedAppSpec)
        pkg_file_path = os.path.join(command_args.zipFileLocation, command_args.zipFileName)
        hook_instructions_path=os.path.join(command_args.hookInstructionsFileLocation, command_args.hookInstructionsFileName)

        pipelinePackager = PipelinePackager(
            pkg_file_location=command_args.zipFileLocation,
            pkg_file_name=command_args.zipFileName,
            source_root=command_args.sourceRoot,
            template_file_path=template_file_path,
            appspec_file_name=command_args.generatedAppSpec,
            appspec_file_location=command_args.generatedAppSpecLocation,
            server_base_path=command_args.serverBasePath,
            parameter_dict=replacement_params,
            allows_absolute_path=command_args.allowsAbsolutePath,
            deploy_owner_user_name=command_args.deployOwnerUserName,
            deploy_owner_group_name=command_args.deployOwnerGroupName,
            hook_instructions_path=hook_instructions_path
        )


        pipelinePackager.create()

        logger.info("PipelinePackager created the CodeDeploy Package: {}".format(pkg_file_path))
        logger.info("Uploading the CodeDeploy Package to the deployment bucket: {}/{}.".format(command_args.s3Bucket, command_args.s3FileKey))
        s3_resource = boto3.resource('s3')
        s3_resource.meta.client.upload_file(pkg_file_path, command_args.s3Bucket, command_args.s3FileKey)
        logger.info("Uploaded the CodeDeploy Package")
        logger.info("Sleeping for {} seconds to give the CodeDeploy Agent time to work".format(command_args.deployPostWaitTime))
        time.sleep(float(command_args.deployPostWaitTime))
        logger.info("Waking up after {} seconds".format(command_args.deployPostWaitTime))
    except Exception as e:
        logger.error(e)
        sys.exit(1)
