data "aws_ami" "ebs_ami" {
  most_recent = true

  filter {
    name   = "name"
    values = ["amzn2-ami-ecs-*-x86_64-ebs"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["amazon"] 
}

resource "aws_launch_template" "ecs_launch_template" {
    name_prefix = "${var.org_key}_launch_template"
    image_id             = data.aws_ami.ebs_ami.id
    iam_instance_profile {
      name = aws_iam_instance_profile.ecs_agent_pro.name
    }
    vpc_security_group_ids = [aws_security_group.ecs_sg.id]
    instance_type        = "t3.xlarge"
    
    lifecycle {
      create_before_destroy = true
    }

    user_data = base64encode(templatefile("${path.module}/templates/pm_asg_userdata.sh", {
    org_key = var.org_key
    }
    ))

}

resource "aws_autoscaling_group" "ecs_asg1" {
    name                      = "${var.org_key}_asg_connect_pm"
    vpc_zone_identifier       = data.aws_subnets.org_private_subnets.ids
    launch_template       {
      id = aws_launch_template.ecs_launch_template.id
      version = "$Latest"
    }
    desired_capacity          = 2
    min_size                  = 1
    max_size                  = 10
    #health_check_grace_period = 0
    health_check_type         = "EC2"

    lifecycle {
      create_before_destroy = true
    }

    tag {
        key                 = "AmazonECSManaged"
        value               = true
        propagate_at_launch = true
    }
}

resource "aws_ecs_capacity_provider" "capacity_provider" {
  name = "${var.org_key}-Capacity-Provider"

  auto_scaling_group_provider {
    auto_scaling_group_arn = aws_autoscaling_group.ecs_asg1.arn
    
    managed_scaling {
      maximum_scaling_step_size = 1000
      minimum_scaling_step_size = 1
      status                    = "ENABLED"
      target_capacity           = 100
      instance_warmup_period    = 300
    }

  }

}

resource "aws_ecs_cluster_capacity_providers" "capacity_provider_cluster" {
 cluster_name = aws_ecs_cluster.ecs-cluster.name

 capacity_providers = [aws_ecs_capacity_provider.capacity_provider.name]
 
}
