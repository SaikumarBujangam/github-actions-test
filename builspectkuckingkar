# Create RSC Application Load Balancer
resource "aws_lb" "Rstudio-Connect_lb" {
  name               = "${var.org_key}-Rstudio-Connect-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.Rstudio-Connect-Alb-sg.id]
  #subnets            = data.aws_subnets.org_public_subnets.ids
  tags = local.tags
  enable_cross_zone_load_balancing = true
  idle_timeout = 60
  enable_deletion_protection = false
  subnet_mapping {
     subnet_id = data.aws_subnets.org_public_subnets.ids[0]
  }

  subnet_mapping {
     subnet_id = data.aws_subnets.org_public_subnets.ids[1]
  }
}
 
# Create Target Group
resource "aws_lb_target_group" "RS-Connect_tg" {
  name     = "${var.org_key}-RS-Connect-tg"
  port     = 80
  target_type = "instance"
  protocol = "HTTP"
  vpc_id   = data.aws_vpc.org_vpc.id
  health_check {
    path = "/__ping__"
    healthy_threshold   = 5   
    unhealthy_threshold = 2
    matcher = "200"
  }
  stickiness {
    type = "lb_cookie"
    cookie_duration = 86400  # Stickiness duration in seconds
  }
  tags = local.tags
}

resource "aws_lb_listener" "RS-Connect_lb" {
  load_balancer_arn = aws_lb.Rstudio-Connect_lb.arn
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-TLS13-1-2-2021-06"
  certificate_arn   = aws_acm_certificate.ecs_ssl_cert.arn
 
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.RS-Connect_tg.arn
  }
  tags = local.tags
}

resource "aws_lb_listener_rule" "host_based_weighted_routing_connect" {
  listener_arn = aws_lb_listener.RS-Connect_lb.arn
  priority     = 01
 
  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.RS-Connect_tg.arn
  }
 
  condition {
    host_header {
      values = [local.ssl_acm_certificate_name]
    }
  }
   
  }

# Create RSPM Application Load Balancer
resource "aws_lb" "Rstudio-pm_lb" {
  name               = "${var.org_key}-Rstudio-pm-lb"
  internal           = true
  load_balancer_type = "application"
  security_groups    = [aws_security_group.Rstudio-pm-Alb-sg.id]
  subnets            = data.aws_subnets.org_public_subnets.ids
  tags = local.tags
}
 
# Create Target Group
resource "aws_lb_target_group" "RS-pm_tg" {
  name     = "${var.org_key}-RS-pm-tg"
  port     = 80
  target_type = "instance"
  protocol = "HTTP"
  vpc_id   = data.aws_vpc.org_vpc.id
  health_check {
    path = "/__ping__"
  }
  tags = local.tags
}

resource "aws_lb_listener" "RS-pm_lb" {
  load_balancer_arn = aws_lb.Rstudio-pm_lb.arn
  port              = "443"
  protocol          = "HTTPS"
  certificate_arn   = aws_acm_certificate.ecs_ssl_cert.arn
 
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.RS-pm_tg.arn
  }
  tags = local.tags
}

resource "aws_lb_listener_rule" "host_based_weighted_routing_pm" {
  listener_arn = aws_lb_listener.RS-pm_lb.arn
  priority     = 01
 
  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.RS-pm_tg.arn
  }
 
  condition {
    host_header {
      values = [local.ssl_acm_certificate_name]
    }
  }
   
}
