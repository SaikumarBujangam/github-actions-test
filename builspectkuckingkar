resource "aws_fsx_lustre_file_system" "fsx_scratch" {

  storage_capacity            = 1200
  subnet_ids                  = var.subnet_ids
  security_group_ids          = var.security_groups
  deployment_type             = "PERSISTENT_2"
  data_compression_type       = var.compression_type 
  per_unit_storage_throughput = var.per_unit_storage_throughput 
  kms_key_id                  = var.kms_key_id
  tags = var.tags
    timeouts {
    create = "60m"
    update = "2h"
    delete = "2h"
  }
}


resource "aws_fsx_data_repository_association" "bfx_fsx_scratch_data_rep" {
  #provider = aws.endor
  file_system_id       = aws_fsx_lustre_file_system.fsx_scratch.id
  data_repository_path = "s3://${var.fsx_s3_bucket}"
  file_system_path     = "/"

  s3 {
    auto_export_policy {
      events = ["NEW", "CHANGED", "DELETED"]
    }

    auto_import_policy {
      events = ["NEW", "CHANGED", "DELETED"]
    }
  }
    timeouts {
    create = "60m"
    update = "2h"
    delete = "2h"
  }
}

variable "platform" {
  description = "Name of the platform"
  type        = string
}

variable "project_key" {
  description = "Environment Name to be used as identifier"
  type        = string
}

variable "org_key" {
  description = "Org Name to be used as identifier"
  type        = string
}

variable "subnet_ids" {
  description = "A list of subnet ids inside the VPC to create the EC2 instance"
  type        = list(string)
}

variable "security_groups" {
   description = "project common security group"
   type        = list(string)
}

variable "compression_type" {
   description = "Scratch FSX compression_type"
   type        = string
   default     = "LZ4"
}

variable "per_unit_storage_throughput" {
   description = "Throughput value for per unit storage"
   type        = string
   default     = "125"
}

variable "fsx_s3_bucket" {
   description = "Throughput value for per unit storage"
   type        = string
}

variable "tags" {
  description = "A mapping of tags to assign to security group"
  type        = map(string)
  default     = {}
}

variable "kms_key_id" {
  description  = "KMS key ID"
  type         = string
}

locals {
 
  region_name         = split("-", var.region)
  region_short_name   = upper(format("%s%s%s%s", local.region_name[0], substr(local.region_name[1], 0, 1), substr(local.region_name[2], 0, 1), "_"))
  infra_build_role    = upper(format("%s%s%s", "R", local.region_short_name, "starcapprojectinfrabuildrole"))
}

data "aws_vpc" "project_vpc" {
   filter {
    name    = "tag:Name"
    values  = ["proje1697521250559-vpc"]
  }
}

data "aws_subnets" "project_subnets" {
  
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.project_vpc.id]
  }
  
  tags = {
      type = "private-subnet"
  }
} 
data "aws_security_group" "notebook_sg_fsx" {
  name = "proje1697521250559-common-sg"
}

data "aws_s3_bucket" "endor_fsx_bucket" {
  provider = aws.endor
  bucket  = "waters-sftp-test"
}


module "fsx" {
  source                 = "../terraform-modules/terraform-aws-fsx"
  subnet_ids             =  data.aws_subnets.project_subnets.ids
  project_key            = "proje1697521250559"
  fsx_s3_bucket          = data.aws_s3_bucket.endor_fsx_bucket.id
  security_groups        = [data.aws_security_group.notebook_sg_fsx.id]
  kms_key_id             = "arn:aws:kms:eu-central-1:745252665765:key/3cbc0ca4-3578-4900-97fc-d70bfbe59e3f"
  platform               = "proje1697521250559-testfsx"
  org_key                = "proje1697521250559-testfsx"
}

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region  = "eu-central-1"
 
}

provider "aws" {
  region = var.region
  alias = "endor"
  assume_role {
    role_arn     = "arn:aws:iam::${var.endor_account_id}:role/${local.infra_build_role}"
    session_name = "INFRA_BUILD"
  }
}

variable "endor_account_id" {
  description = "Endor Account ID"
  type        = string
  default     = "687979975259"
}

variable "region" {
  description = "The Region Name where AWS resources will be deployed"
  type        = string
  default     = "eu-central-1"
}

C:\Users\umababy.kannan\OneDrive - HCL Technologies Ltd\Documents\Star CAP\project-infra-provisioning-services\infra-scripts\terraform-init>terraform plan
╷
│ Error: Provider configuration not present
│
│ To work with module.fsx.aws_fsx_data_repository_association.bfx_fsx_scratch_data_rep its original provider configuration at
│ module.fsx.provider["registry.terraform.io/hashicorp/aws"].endor is required, but it has been removed. This occurs when a provider configuration is removed while objects
│ created by that provider still exist in the state. Re-add the provider configuration to destroy module.fsx.aws_fsx_data_repository_association.bfx_fsx_scratch_data_rep,
│ after which you can remove the provider configuration again.
╵

C:\Users\umababy.kannan\OneDrive - HCL Technologies Ltd\Documents\Star CAP\project-infra-provisioning-services\infra-scripts\terraform-init>
